
Lab4a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  000010a4  00001138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000016e  0080013e  0080013e  00001176  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001176  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  00001214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002601  00000000  00000000  0000142c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001096  00000000  00000000  00003a2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001438  00000000  00000000  00004ac3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005e4  00000000  00000000  00005efc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b14  00000000  00000000  000064e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c51  00000000  00000000  00006ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e8  00000000  00000000  00008c45  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 83 00 	jmp	0x106	; 0x106 <__ctors_end>
       4:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
       8:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
       c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      10:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      14:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      18:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      1c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      20:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      24:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      28:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      2c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      30:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      34:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      38:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      3c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      40:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      44:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      48:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      4c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      50:	0c 94 24 04 	jmp	0x848	; 0x848 <__vector_20>
      54:	0c 94 f3 03 	jmp	0x7e6	; 0x7e6 <__vector_21>
      58:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      5c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      60:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      64:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      68:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      6c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      70:	0c 94 7d 04 	jmp	0x8fa	; 0x8fa <__vector_28>
      74:	0c 94 4c 04 	jmp	0x898	; 0x898 <__vector_29>
      78:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      7c:	2d 02       	muls	r18, r29
      7e:	2d 02       	muls	r18, r29
      80:	2d 02       	muls	r18, r29
      82:	2d 02       	muls	r18, r29
      84:	2d 02       	muls	r18, r29
      86:	2b 02       	muls	r18, r27
      88:	2b 02       	muls	r18, r27
      8a:	15 02       	muls	r17, r21
      8c:	17 02       	muls	r17, r23
      8e:	17 02       	muls	r17, r23
      90:	17 02       	muls	r17, r23
      92:	17 02       	muls	r17, r23
      94:	19 02       	muls	r17, r25
      96:	19 02       	muls	r17, r25
      98:	19 02       	muls	r17, r25
      9a:	19 02       	muls	r17, r25
      9c:	2b 02       	muls	r18, r27
      9e:	2b 02       	muls	r18, r27
      a0:	1b 02       	muls	r17, r27
      a2:	1b 02       	muls	r17, r27
      a4:	1b 02       	muls	r17, r27
      a6:	1b 02       	muls	r17, r27
      a8:	1b 02       	muls	r17, r27
      aa:	2b 02       	muls	r18, r27
      ac:	2b 02       	muls	r18, r27
      ae:	1d 02       	muls	r17, r29
      b0:	1d 02       	muls	r17, r29
      b2:	1d 02       	muls	r17, r29
      b4:	1d 02       	muls	r17, r29
      b6:	2b 02       	muls	r18, r27
      b8:	2b 02       	muls	r18, r27
      ba:	2b 02       	muls	r18, r27
      bc:	1f 02       	muls	r17, r31
      be:	1f 02       	muls	r17, r31
      c0:	1f 02       	muls	r17, r31
      c2:	1f 02       	muls	r17, r31
      c4:	1f 02       	muls	r17, r31
      c6:	2b 02       	muls	r18, r27
      c8:	2b 02       	muls	r18, r27
      ca:	21 02       	muls	r18, r17
      cc:	23 02       	muls	r18, r19
      ce:	23 02       	muls	r18, r19
      d0:	23 02       	muls	r18, r19
      d2:	23 02       	muls	r18, r19
      d4:	25 02       	muls	r18, r21
      d6:	25 02       	muls	r18, r21
      d8:	25 02       	muls	r18, r21
      da:	25 02       	muls	r18, r21
      dc:	2b 02       	muls	r18, r27
      de:	2b 02       	muls	r18, r27
      e0:	27 02       	muls	r18, r23
      e2:	27 02       	muls	r18, r23
      e4:	27 02       	muls	r18, r23
      e6:	27 02       	muls	r18, r23
      e8:	27 02       	muls	r18, r23
      ea:	2b 02       	muls	r18, r27
      ec:	2b 02       	muls	r18, r27
      ee:	29 02       	muls	r18, r25
      f0:	29 02       	muls	r18, r25
      f2:	29 02       	muls	r18, r25
      f4:	29 02       	muls	r18, r25
      f6:	80 02       	muls	r24, r16
      f8:	84 02       	muls	r24, r20
      fa:	88 02       	muls	r24, r24
      fc:	97 02       	muls	r25, r23
      fe:	a6 02       	muls	r26, r22
     100:	ac 02       	muls	r26, r28
     102:	b2 02       	muls	r27, r18
     104:	b8 02       	muls	r27, r24

00000106 <__ctors_end>:
     106:	11 24       	eor	r1, r1
     108:	1f be       	out	0x3f, r1	; 63
     10a:	cf ef       	ldi	r28, 0xFF	; 255
     10c:	d8 e0       	ldi	r29, 0x08	; 8
     10e:	de bf       	out	0x3e, r29	; 62
     110:	cd bf       	out	0x3d, r28	; 61

00000112 <__do_copy_data>:
     112:	11 e0       	ldi	r17, 0x01	; 1
     114:	a0 e0       	ldi	r26, 0x00	; 0
     116:	b1 e0       	ldi	r27, 0x01	; 1
     118:	e4 ea       	ldi	r30, 0xA4	; 164
     11a:	f0 e1       	ldi	r31, 0x10	; 16
     11c:	02 c0       	rjmp	.+4      	; 0x122 <__do_copy_data+0x10>
     11e:	05 90       	lpm	r0, Z+
     120:	0d 92       	st	X+, r0
     122:	ae 33       	cpi	r26, 0x3E	; 62
     124:	b1 07       	cpc	r27, r17
     126:	d9 f7       	brne	.-10     	; 0x11e <__do_copy_data+0xc>

00000128 <__do_clear_bss>:
     128:	22 e0       	ldi	r18, 0x02	; 2
     12a:	ae e3       	ldi	r26, 0x3E	; 62
     12c:	b1 e0       	ldi	r27, 0x01	; 1
     12e:	01 c0       	rjmp	.+2      	; 0x132 <.do_clear_bss_start>

00000130 <.do_clear_bss_loop>:
     130:	1d 92       	st	X+, r1

00000132 <.do_clear_bss_start>:
     132:	ac 3a       	cpi	r26, 0xAC	; 172
     134:	b2 07       	cpc	r27, r18
     136:	e1 f7       	brne	.-8      	; 0x130 <.do_clear_bss_loop>
     138:	0e 94 07 03 	call	0x60e	; 0x60e <main>
     13c:	0c 94 50 08 	jmp	0x10a0	; 0x10a0 <_exit>

00000140 <__bad_interrupt>:
     140:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000144 <combine_bool>:
/*
*Méthode qui recoit 7 booleans en parametre et retourne un entier non signée de 8 bit
*Chaque bit de l'entier correspond respectivement a un des booleans. Le dernier bit est egal a 1
*/
uint8_t combine_bool(bool S1,bool S2,bool S3,bool S4,bool S5,bool S6,bool S7)
{
     144:	cf 92       	push	r12
     146:	ef 92       	push	r14
     148:	0f 93       	push	r16
    //Fusionner les bits des boutons pour former un Byte
    uint8_t buttonsByte = (S1 << 7) | (S2 << 6) | (S3 << 5) | (S4 << 4) | (S5 << 3) | (S6 << 2) | (S7 << 1) | 1;
    return buttonsByte;
     14a:	9c 2d       	mov	r25, r12
     14c:	99 0f       	add	r25, r25
     14e:	91 60       	ori	r25, 0x01	; 1
     150:	ee 0c       	add	r14, r14
     152:	ee 0c       	add	r14, r14
     154:	e9 2a       	or	r14, r25
     156:	00 0f       	add	r16, r16
     158:	00 0f       	add	r16, r16
     15a:	00 0f       	add	r16, r16
     15c:	0e 29       	or	r16, r14
     15e:	90 e1       	ldi	r25, 0x10	; 16
     160:	29 9f       	mul	r18, r25
     162:	90 01       	movw	r18, r0
     164:	11 24       	eor	r1, r1
     166:	02 2b       	or	r16, r18
     168:	20 e2       	ldi	r18, 0x20	; 32
     16a:	42 9f       	mul	r20, r18
     16c:	a0 01       	movw	r20, r0
     16e:	11 24       	eor	r1, r1
     170:	40 2b       	or	r20, r16
     172:	90 e4       	ldi	r25, 0x40	; 64
     174:	69 9f       	mul	r22, r25
     176:	b0 01       	movw	r22, r0
     178:	11 24       	eor	r1, r1
     17a:	64 2b       	or	r22, r20
     17c:	20 e8       	ldi	r18, 0x80	; 128
     17e:	82 9f       	mul	r24, r18
     180:	c0 01       	movw	r24, r0
     182:	11 24       	eor	r1, r1
}
     184:	86 2b       	or	r24, r22
     186:	0f 91       	pop	r16
     188:	ef 90       	pop	r14
     18a:	cf 90       	pop	r12
     18c:	08 95       	ret

0000018e <send_packet>:

/*
*Méthode qui recoit 4 entiers non signé de 8 bit chacuns et envoie Au module Wi-FI un paquet les contenant en utilisant le port recu en parametre
*/
void send_packet(uart_e port, uint8_t x, uint8_t y, uint8_t potentiometre, uint8_t buttonsByte)
{
     18e:	df 92       	push	r13
     190:	ef 92       	push	r14
     192:	ff 92       	push	r15
     194:	0f 93       	push	r16
     196:	1f 93       	push	r17
     198:	cf 93       	push	r28
     19a:	df 93       	push	r29
     19c:	00 d0       	rcall	.+0      	; 0x19e <send_packet+0x10>
     19e:	00 d0       	rcall	.+0      	; 0x1a0 <send_packet+0x12>
     1a0:	1f 92       	push	r1
     1a2:	cd b7       	in	r28, 0x3d	; 61
     1a4:	de b7       	in	r29, 0x3e	; 62
     1a6:	d8 2e       	mov	r13, r24
     1a8:	e6 2e       	mov	r14, r22
     1aa:	f4 2e       	mov	r15, r20
     1ac:	12 2f       	mov	r17, r18
    uart_put_byte(port, 0);
     1ae:	60 e0       	ldi	r22, 0x00	; 0
     1b0:	0e 94 fe 04 	call	0x9fc	; 0x9fc <uart_put_byte>
	
	//Aucun Byte ne doit etre 0, Sinon problemes avec le protocole de communication
    if (x == 0) 
     1b4:	e1 10       	cpse	r14, r1
     1b6:	02 c0       	rjmp	.+4      	; 0x1bc <send_packet+0x2e>
        x = 1;
     1b8:	ee 24       	eor	r14, r14
     1ba:	e3 94       	inc	r14
    if (y == 0) 
     1bc:	f1 10       	cpse	r15, r1
     1be:	02 c0       	rjmp	.+4      	; 0x1c4 <send_packet+0x36>
        y = 1;
     1c0:	ff 24       	eor	r15, r15
     1c2:	f3 94       	inc	r15
    if (potentiometre == 0) 
     1c4:	11 11       	cpse	r17, r1
     1c6:	01 c0       	rjmp	.+2      	; 0x1ca <send_packet+0x3c>
        potentiometre = 1;
     1c8:	11 e0       	ldi	r17, 0x01	; 1
    
	//envoyer le paquet d'informations
    char packet[5] = {x,y,potentiometre,buttonsByte,'\0'};
     1ca:	e9 82       	std	Y+1, r14	; 0x01
     1cc:	fa 82       	std	Y+2, r15	; 0x02
     1ce:	1b 83       	std	Y+3, r17	; 0x03
     1d0:	0c 83       	std	Y+4, r16	; 0x04
     1d2:	1d 82       	std	Y+5, r1	; 0x05
    uart_put_string(port, packet);
     1d4:	be 01       	movw	r22, r28
     1d6:	6f 5f       	subi	r22, 0xFF	; 255
     1d8:	7f 4f       	sbci	r23, 0xFF	; 255
     1da:	8d 2d       	mov	r24, r13
     1dc:	0e 94 15 05 	call	0xa2a	; 0xa2a <uart_put_string>
}
     1e0:	0f 90       	pop	r0
     1e2:	0f 90       	pop	r0
     1e4:	0f 90       	pop	r0
     1e6:	0f 90       	pop	r0
     1e8:	0f 90       	pop	r0
     1ea:	df 91       	pop	r29
     1ec:	cf 91       	pop	r28
     1ee:	1f 91       	pop	r17
     1f0:	0f 91       	pop	r16
     1f2:	ff 90       	pop	r15
     1f4:	ef 90       	pop	r14
     1f6:	df 90       	pop	r13
     1f8:	08 95       	ret

000001fa <adc_init>:
---------------------------------------------------------------------------- */

void adc_init(void) {

  // 1-Configuration des broches du port A à mettre en entrée
  DDRA = clear_bit(DDRA, PA0);
     1fa:	08 98       	cbi	0x01, 0	; 1
  DDRA = clear_bit(DDRA, PA1);
     1fc:	09 98       	cbi	0x01, 1	; 1
  // DDRA = clear_bit(DDRA, PA2);
  DDRA = clear_bit(DDRA, PA3);
     1fe:	0b 98       	cbi	0x01, 3	; 1
  // DDRA = clear_bit(DDRA, PA4);

  // 2-Sélectionner la référence de tension: la tension d'alimentation
  ADMUX = clear_bit(ADMUX, REFS1);
     200:	ec e7       	ldi	r30, 0x7C	; 124
     202:	f0 e0       	ldi	r31, 0x00	; 0
     204:	80 81       	ld	r24, Z
     206:	8f 77       	andi	r24, 0x7F	; 127
     208:	80 83       	st	Z, r24
  ADMUX = set_bit(ADMUX, REFS0);
     20a:	80 81       	ld	r24, Z
     20c:	80 64       	ori	r24, 0x40	; 64
     20e:	80 83       	st	Z, r24
  // 3-Choisir le format du résultat de conversion: shift a gauche pour que
  // les 8 MSB se retrouvent dans le registre ADCH (ADLAR=1)
  ADMUX = set_bit(ADMUX, ADLAR);
     210:	80 81       	ld	r24, Z
     212:	80 62       	ori	r24, 0x20	; 32
     214:	80 83       	st	Z, r24
  // 4-Choisir le facteur de division de l'horloge
  // ( L'horloge l'ADC ne doit pas dépasser 200kHz. Avec une horloge de 8MHZ, ça
  // prend une division d'horloge de min 40. Donc 64 ou 128) */
  ADCSRA = set_bits(ADCSRA, 0b00000111);
     216:	ea e7       	ldi	r30, 0x7A	; 122
     218:	f0 e0       	ldi	r31, 0x00	; 0
     21a:	80 81       	ld	r24, Z
     21c:	87 60       	ori	r24, 0x07	; 7
     21e:	80 83       	st	Z, r24
  // 5-Activer le CAN
  ADCSRA = set_bit(ADCSRA, ADEN);
     220:	80 81       	ld	r24, Z
     222:	80 68       	ori	r24, 0x80	; 128
     224:	80 83       	st	Z, r24
     226:	08 95       	ret

00000228 <adc_read>:
}

uint8_t adc_read(uint8_t canal) {

  // 1-Sélection de l'entrée à convertir (registre ADMUX<-canal)
  ADMUX = write_bits(ADMUX, 0b00000111, canal);
     228:	ec e7       	ldi	r30, 0x7C	; 124
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	90 81       	ld	r25, Z
     22e:	98 7f       	andi	r25, 0xF8	; 248
     230:	87 70       	andi	r24, 0x07	; 7
     232:	89 2b       	or	r24, r25
     234:	80 83       	st	Z, r24

  // 2-Démarrage d'une conversion
  ADCSRA = set_bit(ADCSRA, ADSC);
     236:	ea e7       	ldi	r30, 0x7A	; 122
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	80 81       	ld	r24, Z
     23c:	80 64       	ori	r24, 0x40	; 64
     23e:	80 83       	st	Z, r24
  // 3-Attente de la fin de conversion
  while (read_bit(ADCSRA, ADSC))
     240:	80 81       	ld	r24, Z
     242:	86 fd       	sbrc	r24, 6
     244:	fd cf       	rjmp	.-6      	; 0x240 <adc_read+0x18>
    ;
  // 4-Lecture et renvoi du résultat
  return ADCH;
     246:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
}
     24a:	08 95       	ret

0000024c <fifo_init>:
void fifo_clean(fifo_t* fifo){
	
	fifo->in_offset = fifo->out_offset;
	fifo->is_full = FALSE;
	fifo->is_empty = TRUE;
	fifo->nb_line = 0;
     24c:	fc 01       	movw	r30, r24
     24e:	71 83       	std	Z+1, r23	; 0x01
     250:	60 83       	st	Z, r22
     252:	42 83       	std	Z+2, r20	; 0x02
     254:	13 82       	std	Z+3, r1	; 0x03
     256:	14 82       	std	Z+4, r1	; 0x04
     258:	81 e0       	ldi	r24, 0x01	; 1
     25a:	85 83       	std	Z+5, r24	; 0x05
     25c:	16 82       	std	Z+6, r1	; 0x06
     25e:	17 82       	std	Z+7, r1	; 0x07
     260:	08 95       	ret

00000262 <fifo_push>:
     262:	fc 01       	movw	r30, r24
     264:	86 81       	ldd	r24, Z+6	; 0x06
     266:	81 11       	cpse	r24, r1
     268:	1f c0       	rjmp	.+62     	; 0x2a8 <fifo_push+0x46>
     26a:	83 81       	ldd	r24, Z+3	; 0x03
     26c:	a0 81       	ld	r26, Z
     26e:	b1 81       	ldd	r27, Z+1	; 0x01
     270:	a8 0f       	add	r26, r24
     272:	b1 1d       	adc	r27, r1
     274:	6c 93       	st	X, r22
     276:	15 82       	std	Z+5, r1	; 0x05
     278:	23 81       	ldd	r18, Z+3	; 0x03
     27a:	42 2f       	mov	r20, r18
     27c:	50 e0       	ldi	r21, 0x00	; 0
     27e:	82 81       	ldd	r24, Z+2	; 0x02
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	01 97       	sbiw	r24, 0x01	; 1
     284:	48 17       	cp	r20, r24
     286:	59 07       	cpc	r21, r25
     288:	11 f4       	brne	.+4      	; 0x28e <fifo_push+0x2c>
     28a:	13 82       	std	Z+3, r1	; 0x03
     28c:	02 c0       	rjmp	.+4      	; 0x292 <fifo_push+0x30>
     28e:	2f 5f       	subi	r18, 0xFF	; 255
     290:	23 83       	std	Z+3, r18	; 0x03
     292:	6a 30       	cpi	r22, 0x0A	; 10
     294:	19 f4       	brne	.+6      	; 0x29c <fifo_push+0x3a>
     296:	87 81       	ldd	r24, Z+7	; 0x07
     298:	8f 5f       	subi	r24, 0xFF	; 255
     29a:	87 83       	std	Z+7, r24	; 0x07
     29c:	93 81       	ldd	r25, Z+3	; 0x03
     29e:	84 81       	ldd	r24, Z+4	; 0x04
     2a0:	98 13       	cpse	r25, r24
     2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <fifo_push+0x46>
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	86 83       	std	Z+6, r24	; 0x06
     2a8:	08 95       	ret

000002aa <fifo_pop>:
     2aa:	fc 01       	movw	r30, r24
     2ac:	85 81       	ldd	r24, Z+5	; 0x05
     2ae:	81 11       	cpse	r24, r1
     2b0:	20 c0       	rjmp	.+64     	; 0x2f2 <fifo_pop+0x48>
     2b2:	94 81       	ldd	r25, Z+4	; 0x04
     2b4:	49 2f       	mov	r20, r25
     2b6:	50 e0       	ldi	r21, 0x00	; 0
     2b8:	a0 81       	ld	r26, Z
     2ba:	b1 81       	ldd	r27, Z+1	; 0x01
     2bc:	a4 0f       	add	r26, r20
     2be:	b5 1f       	adc	r27, r21
     2c0:	8c 91       	ld	r24, X
     2c2:	16 82       	std	Z+6, r1	; 0x06
     2c4:	22 81       	ldd	r18, Z+2	; 0x02
     2c6:	30 e0       	ldi	r19, 0x00	; 0
     2c8:	21 50       	subi	r18, 0x01	; 1
     2ca:	31 09       	sbc	r19, r1
     2cc:	42 17       	cp	r20, r18
     2ce:	53 07       	cpc	r21, r19
     2d0:	11 f4       	brne	.+4      	; 0x2d6 <fifo_pop+0x2c>
     2d2:	14 82       	std	Z+4, r1	; 0x04
     2d4:	02 c0       	rjmp	.+4      	; 0x2da <fifo_pop+0x30>
     2d6:	9f 5f       	subi	r25, 0xFF	; 255
     2d8:	94 83       	std	Z+4, r25	; 0x04
     2da:	8a 30       	cpi	r24, 0x0A	; 10
     2dc:	19 f4       	brne	.+6      	; 0x2e4 <fifo_pop+0x3a>
     2de:	97 81       	ldd	r25, Z+7	; 0x07
     2e0:	91 50       	subi	r25, 0x01	; 1
     2e2:	97 83       	std	Z+7, r25	; 0x07
     2e4:	24 81       	ldd	r18, Z+4	; 0x04
     2e6:	93 81       	ldd	r25, Z+3	; 0x03
     2e8:	29 13       	cpse	r18, r25
     2ea:	04 c0       	rjmp	.+8      	; 0x2f4 <fifo_pop+0x4a>
     2ec:	91 e0       	ldi	r25, 0x01	; 1
     2ee:	95 83       	std	Z+5, r25	; 0x05
     2f0:	08 95       	ret
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	08 95       	ret

000002f6 <fifo_is_empty>:


bool fifo_is_empty(fifo_t* fifo) {

    return fifo->is_empty;
}
     2f6:	fc 01       	movw	r30, r24
     2f8:	85 81       	ldd	r24, Z+5	; 0x05
     2fa:	08 95       	ret

000002fc <fifo_is_full>:


bool fifo_is_full(fifo_t* fifo){

    return fifo->is_full;
}
     2fc:	fc 01       	movw	r30, r24
     2fe:	86 81       	ldd	r24, Z+6	; 0x06
     300:	08 95       	ret

00000302 <clock_data>:


uint8_t index_to_row(uint8_t index){

    return index / LCD_NB_COL;
}
     302:	88 b9       	out	0x08, r24	; 8
     304:	85 e8       	ldi	r24, 0x85	; 133
     306:	8a 95       	dec	r24
     308:	f1 f7       	brne	.-4      	; 0x306 <clock_data+0x4>
     30a:	00 00       	nop
     30c:	17 98       	cbi	0x02, 7	; 2
     30e:	85 e8       	ldi	r24, 0x85	; 133
     310:	8a 95       	dec	r24
     312:	f1 f7       	brne	.-4      	; 0x310 <clock_data+0xe>
     314:	00 00       	nop
     316:	17 9a       	sbi	0x02, 7	; 2
     318:	08 95       	ret

0000031a <hd44780_clear_display>:
     31a:	15 98       	cbi	0x02, 5	; 2
     31c:	81 e0       	ldi	r24, 0x01	; 1
     31e:	0e 94 81 01 	call	0x302	; 0x302 <clock_data>
     322:	8f e9       	ldi	r24, 0x9F	; 159
     324:	9f e0       	ldi	r25, 0x0F	; 15
     326:	01 97       	sbiw	r24, 0x01	; 1
     328:	f1 f7       	brne	.-4      	; 0x326 <hd44780_clear_display+0xc>
     32a:	00 c0       	rjmp	.+0      	; 0x32c <hd44780_clear_display+0x12>
     32c:	00 00       	nop
     32e:	15 9a       	sbi	0x02, 5	; 2
     330:	08 95       	ret

00000332 <hd44780_set_entry_mode>:
     332:	81 30       	cpi	r24, 0x01	; 1
     334:	11 f0       	breq	.+4      	; 0x33a <hd44780_set_entry_mode+0x8>
     336:	80 e0       	ldi	r24, 0x00	; 0
     338:	01 c0       	rjmp	.+2      	; 0x33c <hd44780_set_entry_mode+0xa>
     33a:	82 e0       	ldi	r24, 0x02	; 2
     33c:	15 98       	cbi	0x02, 5	; 2
     33e:	84 60       	ori	r24, 0x04	; 4
     340:	0e 94 81 01 	call	0x302	; 0x302 <clock_data>
     344:	15 9a       	sbi	0x02, 5	; 2
     346:	08 95       	ret

00000348 <hd44780_set_display_control>:
     348:	81 30       	cpi	r24, 0x01	; 1
     34a:	11 f4       	brne	.+4      	; 0x350 <hd44780_set_display_control+0x8>
     34c:	84 e0       	ldi	r24, 0x04	; 4
     34e:	01 c0       	rjmp	.+2      	; 0x352 <hd44780_set_display_control+0xa>
     350:	80 e0       	ldi	r24, 0x00	; 0
     352:	61 30       	cpi	r22, 0x01	; 1
     354:	09 f4       	brne	.+2      	; 0x358 <hd44780_set_display_control+0x10>
     356:	82 60       	ori	r24, 0x02	; 2
     358:	41 30       	cpi	r20, 0x01	; 1
     35a:	09 f4       	brne	.+2      	; 0x35e <hd44780_set_display_control+0x16>
     35c:	81 60       	ori	r24, 0x01	; 1
     35e:	15 98       	cbi	0x02, 5	; 2
     360:	88 60       	ori	r24, 0x08	; 8
     362:	0e 94 81 01 	call	0x302	; 0x302 <clock_data>
     366:	15 9a       	sbi	0x02, 5	; 2
     368:	08 95       	ret

0000036a <hd44780_init>:
     36a:	cf 93       	push	r28
     36c:	df 93       	push	r29
     36e:	c6 2f       	mov	r28, r22
     370:	d4 2f       	mov	r29, r20
     372:	98 e3       	ldi	r25, 0x38	; 56
     374:	98 b9       	out	0x08, r25	; 8
     376:	15 98       	cbi	0x02, 5	; 2
     378:	16 98       	cbi	0x02, 6	; 2
     37a:	9f ef       	ldi	r25, 0xFF	; 255
     37c:	97 b9       	out	0x07, r25	; 7
     37e:	91 b1       	in	r25, 0x01	; 1
     380:	90 6e       	ori	r25, 0xE0	; 224
     382:	91 b9       	out	0x01, r25	; 1
     384:	ef e1       	ldi	r30, 0x1F	; 31
     386:	fe e4       	ldi	r31, 0x4E	; 78
     388:	31 97       	sbiw	r30, 0x01	; 1
     38a:	f1 f7       	brne	.-4      	; 0x388 <hd44780_init+0x1e>
     38c:	00 c0       	rjmp	.+0      	; 0x38e <hd44780_init+0x24>
     38e:	00 00       	nop
     390:	17 98       	cbi	0x02, 7	; 2
     392:	ef e0       	ldi	r30, 0x0F	; 15
     394:	f7 e2       	ldi	r31, 0x27	; 39
     396:	31 97       	sbiw	r30, 0x01	; 1
     398:	f1 f7       	brne	.-4      	; 0x396 <hd44780_init+0x2c>
     39a:	00 c0       	rjmp	.+0      	; 0x39c <hd44780_init+0x32>
     39c:	00 00       	nop
     39e:	17 9a       	sbi	0x02, 7	; 2
     3a0:	ef e0       	ldi	r30, 0x0F	; 15
     3a2:	f7 e2       	ldi	r31, 0x27	; 39
     3a4:	31 97       	sbiw	r30, 0x01	; 1
     3a6:	f1 f7       	brne	.-4      	; 0x3a4 <hd44780_init+0x3a>
     3a8:	00 c0       	rjmp	.+0      	; 0x3aa <hd44780_init+0x40>
     3aa:	00 00       	nop
     3ac:	17 98       	cbi	0x02, 7	; 2
     3ae:	e7 ec       	ldi	r30, 0xC7	; 199
     3b0:	f0 e0       	ldi	r31, 0x00	; 0
     3b2:	31 97       	sbiw	r30, 0x01	; 1
     3b4:	f1 f7       	brne	.-4      	; 0x3b2 <hd44780_init+0x48>
     3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <hd44780_init+0x4e>
     3b8:	00 00       	nop
     3ba:	17 9a       	sbi	0x02, 7	; 2
     3bc:	e7 ec       	ldi	r30, 0xC7	; 199
     3be:	f0 e0       	ldi	r31, 0x00	; 0
     3c0:	31 97       	sbiw	r30, 0x01	; 1
     3c2:	f1 f7       	brne	.-4      	; 0x3c0 <hd44780_init+0x56>
     3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <hd44780_init+0x5c>
     3c6:	00 00       	nop
     3c8:	17 98       	cbi	0x02, 7	; 2
     3ca:	ef ef       	ldi	r30, 0xFF	; 255
     3cc:	f5 e0       	ldi	r31, 0x05	; 5
     3ce:	31 97       	sbiw	r30, 0x01	; 1
     3d0:	f1 f7       	brne	.-4      	; 0x3ce <hd44780_init+0x64>
     3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <hd44780_init+0x6a>
     3d4:	00 00       	nop
     3d6:	17 9a       	sbi	0x02, 7	; 2
     3d8:	0e 94 99 01 	call	0x332	; 0x332 <hd44780_set_entry_mode>
     3dc:	4d 2f       	mov	r20, r29
     3de:	6c 2f       	mov	r22, r28
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	0e 94 a4 01 	call	0x348	; 0x348 <hd44780_set_display_control>
     3e6:	0e 94 8d 01 	call	0x31a	; 0x31a <hd44780_clear_display>
     3ea:	df 91       	pop	r29
     3ec:	cf 91       	pop	r28
     3ee:	08 95       	ret

000003f0 <hd44780_set_cursor_position>:
     3f0:	61 30       	cpi	r22, 0x01	; 1
     3f2:	11 f4       	brne	.+4      	; 0x3f8 <hd44780_set_cursor_position+0x8>
     3f4:	90 e4       	ldi	r25, 0x40	; 64
     3f6:	01 c0       	rjmp	.+2      	; 0x3fa <hd44780_set_cursor_position+0xa>
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	15 98       	cbi	0x02, 5	; 2
     3fc:	89 0f       	add	r24, r25
     3fe:	80 68       	ori	r24, 0x80	; 128
     400:	0e 94 81 01 	call	0x302	; 0x302 <clock_data>
     404:	15 9a       	sbi	0x02, 5	; 2
     406:	08 95       	ret

00000408 <hd44780_write_char>:
     408:	15 9a       	sbi	0x02, 5	; 2
     40a:	80 32       	cpi	r24, 0x20	; 32
     40c:	18 f0       	brcs	.+6      	; 0x414 <hd44780_write_char+0xc>
     40e:	0e 94 81 01 	call	0x302	; 0x302 <clock_data>
     412:	08 95       	ret
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	fc 01       	movw	r30, r24
     418:	e0 5c       	subi	r30, 0xC0	; 192
     41a:	f1 09       	sbc	r31, r1
     41c:	ed 33       	cpi	r30, 0x3D	; 61
     41e:	f1 05       	cpc	r31, r1
     420:	d0 f4       	brcc	.+52     	; 0x456 <hd44780_write_char+0x4e>
     422:	e2 5c       	subi	r30, 0xC2	; 194
     424:	ff 4f       	sbci	r31, 0xFF	; 255
     426:	0c 94 60 05 	jmp	0xac0	; 0xac0 <__tablejump2__>
     42a:	83 e4       	ldi	r24, 0x43	; 67
     42c:	17 c0       	rjmp	.+46     	; 0x45c <hd44780_write_char+0x54>
     42e:	85 e4       	ldi	r24, 0x45	; 69
     430:	15 c0       	rjmp	.+42     	; 0x45c <hd44780_write_char+0x54>
     432:	89 e4       	ldi	r24, 0x49	; 73
     434:	13 c0       	rjmp	.+38     	; 0x45c <hd44780_write_char+0x54>
     436:	8f e4       	ldi	r24, 0x4F	; 79
     438:	11 c0       	rjmp	.+34     	; 0x45c <hd44780_write_char+0x54>
     43a:	85 e5       	ldi	r24, 0x55	; 85
     43c:	0f c0       	rjmp	.+30     	; 0x45c <hd44780_write_char+0x54>
     43e:	81 e6       	ldi	r24, 0x61	; 97
     440:	0d c0       	rjmp	.+26     	; 0x45c <hd44780_write_char+0x54>
     442:	83 e6       	ldi	r24, 0x63	; 99
     444:	0b c0       	rjmp	.+22     	; 0x45c <hd44780_write_char+0x54>
     446:	85 e6       	ldi	r24, 0x65	; 101
     448:	09 c0       	rjmp	.+18     	; 0x45c <hd44780_write_char+0x54>
     44a:	89 e6       	ldi	r24, 0x69	; 105
     44c:	07 c0       	rjmp	.+14     	; 0x45c <hd44780_write_char+0x54>
     44e:	8f e6       	ldi	r24, 0x6F	; 111
     450:	05 c0       	rjmp	.+10     	; 0x45c <hd44780_write_char+0x54>
     452:	85 e7       	ldi	r24, 0x75	; 117
     454:	03 c0       	rjmp	.+6      	; 0x45c <hd44780_write_char+0x54>
     456:	85 ea       	ldi	r24, 0xA5	; 165
     458:	01 c0       	rjmp	.+2      	; 0x45c <hd44780_write_char+0x54>
     45a:	81 e4       	ldi	r24, 0x41	; 65
     45c:	0e 94 81 01 	call	0x302	; 0x302 <clock_data>
     460:	08 95       	ret

00000462 <lcd_init>:
     462:	40 e0       	ldi	r20, 0x00	; 0
     464:	61 e0       	ldi	r22, 0x01	; 1
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	0e 94 b5 01 	call	0x36a	; 0x36a <hd44780_init>
     46c:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <local_index>
     470:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__data_end>
     474:	08 95       	ret

00000476 <lcd_clear_display>:
     476:	0e 94 8d 01 	call	0x31a	; 0x31a <hd44780_clear_display>
     47a:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <local_index>
     47e:	08 95       	ret

00000480 <lcd_set_cursor_position>:
     480:	cf 93       	push	r28
     482:	df 93       	push	r29
     484:	80 31       	cpi	r24, 0x10	; 16
     486:	68 f4       	brcc	.+26     	; 0x4a2 <lcd_set_cursor_position+0x22>
     488:	62 30       	cpi	r22, 0x02	; 2
     48a:	58 f4       	brcc	.+22     	; 0x4a2 <lcd_set_cursor_position+0x22>
     48c:	d6 2f       	mov	r29, r22
     48e:	c8 2f       	mov	r28, r24
     490:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <hd44780_set_cursor_position>
     494:	8c 2f       	mov	r24, r28
     496:	90 e1       	ldi	r25, 0x10	; 16
     498:	d9 9f       	mul	r29, r25
     49a:	80 0d       	add	r24, r0
     49c:	11 24       	eor	r1, r1
     49e:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <local_index>
     4a2:	df 91       	pop	r29
     4a4:	cf 91       	pop	r28
     4a6:	08 95       	ret

000004a8 <shift_local_index>:

bool shift_local_index(bool foward){

    uint8_t previous_row;

    previous_row = index_to_row(local_index);
     4a8:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <local_index>
}


uint8_t index_to_row(uint8_t index){

    return index / LCD_NB_COL;
     4ac:	29 2f       	mov	r18, r25
     4ae:	22 95       	swap	r18
     4b0:	2f 70       	andi	r18, 0x0F	; 15
    uint8_t previous_row;

    previous_row = index_to_row(local_index);

    /* Si on est dans le sens foward */
    if(foward == TRUE){
     4b2:	81 30       	cpi	r24, 0x01	; 1
     4b4:	49 f4       	brne	.+18     	; 0x4c8 <shift_local_index+0x20>

        /* Si on est à la fin */
        if(local_index >= MAX_INDEX - 1){
     4b6:	9f 31       	cpi	r25, 0x1F	; 31
     4b8:	18 f0       	brcs	.+6      	; 0x4c0 <shift_local_index+0x18>

			local_index = 0;
     4ba:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <local_index>
     4be:	0d c0       	rjmp	.+26     	; 0x4da <shift_local_index+0x32>
        }

        else{

            local_index++;
     4c0:	9f 5f       	subi	r25, 0xFF	; 255
     4c2:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <local_index>
     4c6:	09 c0       	rjmp	.+18     	; 0x4da <shift_local_index+0x32>

    /* Si on est dans le sens décrémental foward ou incrémental backward*/
    else{

        /* Si on est au début */
        if(local_index <= 0){
     4c8:	91 11       	cpse	r25, r1
     4ca:	04 c0       	rjmp	.+8      	; 0x4d4 <shift_local_index+0x2c>
			
            local_index = MAX_INDEX - 1;
     4cc:	8f e1       	ldi	r24, 0x1F	; 31
     4ce:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <local_index>
     4d2:	03 c0       	rjmp	.+6      	; 0x4da <shift_local_index+0x32>
        }

        else{

            local_index--;
     4d4:	91 50       	subi	r25, 0x01	; 1
     4d6:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <local_index>
        }
    }

    /* Si la row actuelle ne correspond pas à l'ancienne il va falloir manuellement
    déplacer le curseur */
    return (previous_row != index_to_row(local_index));
     4da:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <local_index>
     4de:	92 95       	swap	r25
     4e0:	9f 70       	andi	r25, 0x0F	; 15
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	92 13       	cpse	r25, r18
     4e6:	01 c0       	rjmp	.+2      	; 0x4ea <shift_local_index+0x42>
     4e8:	80 e0       	ldi	r24, 0x00	; 0
}
     4ea:	08 95       	ret

000004ec <lcd_shift_cursor>:
}


void lcd_shift_cursor(lcd_shift_e shift){

    switch(shift){
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	88 30       	cpi	r24, 0x08	; 8
     4f0:	91 05       	cpc	r25, r1
     4f2:	08 f0       	brcs	.+2      	; 0x4f6 <lcd_shift_cursor+0xa>
     4f4:	42 c0       	rjmp	.+132    	; 0x57a <lcd_shift_cursor+0x8e>
     4f6:	fc 01       	movw	r30, r24
     4f8:	e5 58       	subi	r30, 0x85	; 133
     4fa:	ff 4f       	sbci	r31, 0xFF	; 255
     4fc:	0c 94 60 05 	jmp	0xac0	; 0xac0 <__tablejump2__>
    case LCD_SHIFT_RIGHT:

        shift_local_index(TRUE);
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	0e 94 54 02 	call	0x4a8	; 0x4a8 <shift_local_index>

        break;
     506:	39 c0       	rjmp	.+114    	; 0x57a <lcd_shift_cursor+0x8e>

    case LCD_SHIFT_LEFT:

        shift_local_index(FALSE);
     508:	80 e0       	ldi	r24, 0x00	; 0
     50a:	0e 94 54 02 	call	0x4a8	; 0x4a8 <shift_local_index>

        break;
     50e:	35 c0       	rjmp	.+106    	; 0x57a <lcd_shift_cursor+0x8e>

    case LCD_SHIFT_UP:

		// Si on est sur la ligne du haut
        if(index_to_row(local_index) <= 0){
     510:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <local_index>
     514:	80 31       	cpi	r24, 0x10	; 16
     516:	38 f4       	brcc	.+14     	; 0x526 <lcd_shift_cursor+0x3a>

			// On se rend à la fin moins une ligne
            local_index += (MAX_INDEX - LCD_NB_COL);
     518:	80 5f       	subi	r24, 0xF0	; 240
     51a:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <local_index>
			
			clear_required_flag = TRUE;
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
     524:	2a c0       	rjmp	.+84     	; 0x57a <lcd_shift_cursor+0x8e>
        }

        else{
			
			// On recule d'une ligne
            local_index -= LCD_NB_COL;
     526:	80 51       	subi	r24, 0x10	; 16
     528:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <local_index>
     52c:	26 c0       	rjmp	.+76     	; 0x57a <lcd_shift_cursor+0x8e>
        break;

    case LCD_SHIFT_DOWN:

		// Si on est rendu à la dernière ligne
        if(index_to_row(local_index) >= LCD_NB_ROW - 1){
     52e:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <local_index>
     532:	80 31       	cpi	r24, 0x10	; 16
     534:	38 f0       	brcs	.+14     	; 0x544 <lcd_shift_cursor+0x58>

			// On ne garde que le numéro de colone (donc sa ramène sur la première ligne)
            local_index %= LCD_NB_COL;
     536:	8f 70       	andi	r24, 0x0F	; 15
     538:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <local_index>
			
			clear_required_flag = TRUE;
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
     542:	1b c0       	rjmp	.+54     	; 0x57a <lcd_shift_cursor+0x8e>
        }

        else{

			// On avance d'une ligne
            local_index += LCD_NB_COL;
     544:	80 5f       	subi	r24, 0xF0	; 240
     546:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <local_index>
     54a:	17 c0       	rjmp	.+46     	; 0x57a <lcd_shift_cursor+0x8e>

        break;
	
	case LCD_SHIFT_END:
	
		local_index = ((index_to_row(local_index) + 1) * LCD_NB_COL) - 1;
     54c:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <local_index>
     550:	8f 60       	ori	r24, 0x0F	; 15
     552:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <local_index>
		
		break;
     556:	11 c0       	rjmp	.+34     	; 0x57a <lcd_shift_cursor+0x8e>
		
	case LCD_SHIFT_START:
		
		local_index = index_to_row(local_index) * LCD_NB_COL;
     558:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <local_index>
     55c:	80 7f       	andi	r24, 0xF0	; 240
     55e:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <local_index>
		
		break;
     562:	0b c0       	rjmp	.+22     	; 0x57a <lcd_shift_cursor+0x8e>
		
	case LCD_SHIFT_TOP:
	
		// On ne garde que le numéro de colone (donc sa ramène sur la première ligne)
		local_index %= LCD_NB_COL;
     564:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <local_index>
     568:	8f 70       	andi	r24, 0x0F	; 15
     56a:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <local_index>
		
		break;
     56e:	05 c0       	rjmp	.+10     	; 0x57a <lcd_shift_cursor+0x8e>
		
	case LCD_SHIFT_BOTTOM:
		
		// On se rend à la fin moins une ligne
		local_index += (MAX_INDEX - LCD_NB_COL);
     570:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <local_index>
     574:	80 5f       	subi	r24, 0xF0	; 240
     576:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <local_index>
		
		break;
	}		

    hd44780_set_cursor_position(index_to_col(local_index), index_to_row(local_index));
     57a:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <local_index>
     57e:	68 2f       	mov	r22, r24
     580:	62 95       	swap	r22
     582:	6f 70       	andi	r22, 0x0F	; 15
     584:	8f 70       	andi	r24, 0x0F	; 15
     586:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <hd44780_set_cursor_position>
     58a:	08 95       	ret

0000058c <lcd_write_char>:
}


void lcd_write_char(char character){
     58c:	cf 93       	push	r28
     58e:	c8 2f       	mov	r28, r24

    bool unsynced;
	
	// Si il s'agit d'un des 32 premier caractères ascii, on s'attend à un contrôle
	// plutôt que l'affichage d'un caractère
	if(character < ' '){
     590:	80 32       	cpi	r24, 0x20	; 32
     592:	68 f4       	brcc	.+26     	; 0x5ae <lcd_write_char+0x22>
		
		switch (character){
     594:	8a 30       	cpi	r24, 0x0A	; 10
     596:	19 f0       	breq	.+6      	; 0x59e <lcd_write_char+0x12>
     598:	8d 30       	cpi	r24, 0x0D	; 13
     59a:	29 f0       	breq	.+10     	; 0x5a6 <lcd_write_char+0x1a>
     59c:	20 c0       	rjmp	.+64     	; 0x5de <lcd_write_char+0x52>
		case '\n':	// 0x0A	new line
			lcd_shift_cursor(LCD_SHIFT_DOWN);
     59e:	83 e0       	ldi	r24, 0x03	; 3
     5a0:	0e 94 76 02 	call	0x4ec	; 0x4ec <lcd_shift_cursor>
			break;
     5a4:	1c c0       	rjmp	.+56     	; 0x5de <lcd_write_char+0x52>
		case '\r':
			lcd_shift_cursor(LCD_SHIFT_START);
     5a6:	85 e0       	ldi	r24, 0x05	; 5
     5a8:	0e 94 76 02 	call	0x4ec	; 0x4ec <lcd_shift_cursor>
			break;
     5ac:	18 c0       	rjmp	.+48     	; 0x5de <lcd_write_char+0x52>
		}		
	}

	else{
		
		if(clear_required_flag == TRUE){
     5ae:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     5b2:	81 30       	cpi	r24, 0x01	; 1
     5b4:	21 f4       	brne	.+8      	; 0x5be <lcd_write_char+0x32>
			
			hd44780_clear_display();
     5b6:	0e 94 8d 01 	call	0x31a	; 0x31a <hd44780_clear_display>
			//hd44780_set_cursor_position(index_to_col(local_index), index_to_row(local_index));
			clear_required_flag = FALSE;
     5ba:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__data_end>
		}
		
		hd44780_write_char(character);
     5be:	8c 2f       	mov	r24, r28
     5c0:	0e 94 04 02 	call	0x408	; 0x408 <hd44780_write_char>

		unsynced = shift_local_index(TRUE);
     5c4:	81 e0       	ldi	r24, 0x01	; 1
     5c6:	0e 94 54 02 	call	0x4a8	; 0x4a8 <shift_local_index>

		if(unsynced == TRUE){
     5ca:	81 30       	cpi	r24, 0x01	; 1
     5cc:	41 f4       	brne	.+16     	; 0x5de <lcd_write_char+0x52>

			hd44780_set_cursor_position(index_to_col(local_index), index_to_row(local_index));
     5ce:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <local_index>
     5d2:	68 2f       	mov	r22, r24
     5d4:	62 95       	swap	r22
     5d6:	6f 70       	andi	r22, 0x0F	; 15
     5d8:	8f 70       	andi	r24, 0x0F	; 15
     5da:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <hd44780_set_cursor_position>
		}
	}
}
     5de:	cf 91       	pop	r28
     5e0:	08 95       	ret

000005e2 <lcd_write_string>:


void lcd_write_string(const char* string){
     5e2:	0f 93       	push	r16
     5e4:	1f 93       	push	r17
     5e6:	cf 93       	push	r28
     5e8:	fc 01       	movw	r30, r24

    uint8_t index = 0;

    while(string[index] != '\0'){
     5ea:	80 81       	ld	r24, Z
     5ec:	88 23       	and	r24, r24
     5ee:	59 f0       	breq	.+22     	; 0x606 <lcd_write_string+0x24>
     5f0:	8f 01       	movw	r16, r30
     5f2:	c0 e0       	ldi	r28, 0x00	; 0

        lcd_write_char(string[index]);
     5f4:	0e 94 c6 02 	call	0x58c	; 0x58c <lcd_write_char>

        index++;
     5f8:	cf 5f       	subi	r28, 0xFF	; 255

void lcd_write_string(const char* string){

    uint8_t index = 0;

    while(string[index] != '\0'){
     5fa:	f8 01       	movw	r30, r16
     5fc:	ec 0f       	add	r30, r28
     5fe:	f1 1d       	adc	r31, r1
     600:	80 81       	ld	r24, Z
     602:	81 11       	cpse	r24, r1
     604:	f7 cf       	rjmp	.-18     	; 0x5f4 <lcd_write_string+0x12>

        lcd_write_char(string[index]);

        index++;
    }
}
     606:	cf 91       	pop	r28
     608:	1f 91       	pop	r17
     60a:	0f 91       	pop	r16
     60c:	08 95       	ret

0000060e <main>:
#include "uart.h"
#include "comms.h"


int main(void)
{
     60e:	cf 93       	push	r28
     610:	df 93       	push	r29
     612:	cd b7       	in	r28, 0x3d	; 61
     614:	de b7       	in	r29, 0x3e	; 62
     616:	e2 97       	sbiw	r28, 0x32	; 50
     618:	0f b6       	in	r0, 0x3f	; 63
     61a:	f8 94       	cli
     61c:	de bf       	out	0x3e, r29	; 62
     61e:	0f be       	out	0x3f, r0	; 63
     620:	cd bf       	out	0x3d, r28	; 61
	//activation des PINS en Entree
	DDRA = clear_bit(DDRA,PA2);
     622:	0a 98       	cbi	0x01, 2	; 1
	DDRA = clear_bit(DDRA,PA4);
     624:	0c 98       	cbi	0x01, 4	; 1
	DDRD = clear_bit(DDRD,PD3);
     626:	53 98       	cbi	0x0a, 3	; 10
	DDRD = clear_bit(DDRD,PD4);
     628:	54 98       	cbi	0x0a, 4	; 10
	DDRD = clear_bit(DDRD,PD5);
     62a:	55 98       	cbi	0x0a, 5	; 10
	DDRD = clear_bit(DDRD,PD6);
     62c:	56 98       	cbi	0x0a, 6	; 10
	DDRD = clear_bit(DDRD,PD7);
     62e:	57 98       	cbi	0x0a, 7	; 10
	//Activation des PULL-UP des pins en Entree
	PORTA=set_bit(PORTA,PA2);
     630:	12 9a       	sbi	0x02, 2	; 2
	PORTA=set_bit(PORTA,PA4);
     632:	14 9a       	sbi	0x02, 4	; 2
	PORTD=set_bit(PORTD,PD3);
     634:	5b 9a       	sbi	0x0b, 3	; 11
	PORTD=set_bit(PORTD,PD4);
     636:	5c 9a       	sbi	0x0b, 4	; 11
	PORTD=set_bit(PORTD,PD5);
     638:	5d 9a       	sbi	0x0b, 5	; 11
	PORTD=set_bit(PORTD,PD6);
     63a:	5e 9a       	sbi	0x0b, 6	; 11
	PORTD=set_bit(PORTD,PD7);
     63c:	5f 9a       	sbi	0x0b, 7	; 11
	//Activation des PINS des Dels En Sortie
	DDRB = set_bit(DDRB,PB0);
     63e:	20 9a       	sbi	0x04, 0	; 4
	DDRB = set_bit(DDRB,PB1);
     640:	21 9a       	sbi	0x04, 1	; 4
	DDRB = set_bit(DDRB,PB2);
     642:	22 9a       	sbi	0x04, 2	; 4
	DDRB = set_bit(DDRB,PB3);
     644:	23 9a       	sbi	0x04, 3	; 4
	DDRB = set_bit(DDRB,PB4);
     646:	24 9a       	sbi	0x04, 4	; 4
	//Eteindre les Dels
	PORTB=clear_bit(PORTB,PB0);
     648:	28 98       	cbi	0x05, 0	; 5
	PORTB=clear_bit(PORTB,PB1);
     64a:	29 98       	cbi	0x05, 1	; 5
	PORTB=clear_bit(PORTB,PB2);
     64c:	2a 98       	cbi	0x05, 2	; 5
	PORTB=clear_bit(PORTB,PB3);
     64e:	2b 98       	cbi	0x05, 3	; 5
	PORTB=clear_bit(PORTB,PB4);
     650:	2c 98       	cbi	0x05, 4	; 5
	uint8_t joystickX;// valeur du potentiometre lineaire X du Joystick
	uint8_t joystickY;// valeur du potentiometre lineaire Y du Joystick
	uint8_t slider;// valeur du potentiometre lineaire 
	bool buttons[7]; // Valeur des 7 boutons
	
	buttons[3]=0;//mise a zero de la valeure du buttons[3] . Sinon causais des probleme lor du redemarrage de la manette
     652:	1e a6       	std	Y+46, r1	; 0x2e
	
	bool flywheelActivated = FALSE; //indique si la roue d'inertie est activer ou desactiver
     654:	1a 82       	std	Y+2, r1	; 0x02
	bool button3StateChanged = TRUE;//indique si l'etat du bouton 3 a été modifier
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	89 83       	std	Y+1, r24	; 0x01
	
	//---------------initialisation------------------------------------------------------------
	
	uart_init(UART_0);//initialisation de la communication UART
     65a:	80 e0       	ldi	r24, 0x00	; 0
     65c:	0e 94 c4 04 	call	0x988	; 0x988 <uart_init>
	lcd_init();// initialisation de l'�cran
     660:	0e 94 31 02 	call	0x462	; 0x462 <lcd_init>
	adc_init();// initialisation du CAN (ADC)
     664:	0e 94 fd 00 	call	0x1fa	; 0x1fa <adc_init>
	sei();//activer les interruptions globales
     668:	78 94       	sei
	{
		//reset ecran
		lcd_clear_display();
		lcd_set_cursor_position(0,0);
		//ecrire sur ecran
		sprintf(lcdScreenText,"B1%d,B2%d,B3%d,B4%d,B5%d,B6%d,B7%d,S%d",buttons[0],buttons[1],buttons[2],buttons[3],buttons[4],buttons[5],buttons[6],slider);
     66a:	0f 2e       	mov	r0, r31
     66c:	f0 e0       	ldi	r31, 0x00	; 0
     66e:	8f 2e       	mov	r8, r31
     670:	f1 e0       	ldi	r31, 0x01	; 1
     672:	9f 2e       	mov	r9, r31
     674:	f0 2d       	mov	r31, r0
     676:	5e 01       	movw	r10, r28
     678:	23 e0       	ldi	r18, 0x03	; 3
     67a:	a2 0e       	add	r10, r18
     67c:	b1 1c       	adc	r11, r1

    //----------------------------boucle infinie-----------------------------------------------
    while (1) 
    {
		//aquisition des entrées (potentiometres lineaire et bouttons)
		joystickX = 255-adc_read(PINA0);// Lis l'état de l'entree du potentiometres lineaire X du JoyStick, l'inverse et l'inscrit dans joystickX
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	0e 94 14 01 	call	0x228	; 0x228 <adc_read>
     684:	18 2f       	mov	r17, r24
     686:	10 95       	com	r17
		joystickY = 255-adc_read(PINA1);// Lis l'état de l'entree du potentiometres lineaire Y du JoyStick, l'inverse et l'inscrit dans joystickY
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	0e 94 14 01 	call	0x228	; 0x228 <adc_read>
     68e:	f8 2e       	mov	r15, r24
     690:	f0 94       	com	r15
		slider    = 255-adc_read(PINA3);// Lis l'état de l'entree du potentiometres lineaire, l'inverse et l'inscrit dans slider
     692:	83 e0       	ldi	r24, 0x03	; 3
     694:	0e 94 14 01 	call	0x228	; 0x228 <adc_read>
     698:	80 95       	com	r24
     69a:	8a ab       	std	Y+50, r24	; 0x32
		buttons[0]=!read_bit(PINA,PA2);	// Lis l'état de l'entree du boutton 0 et l'inscrit dans buttons[0]
     69c:	90 b1       	in	r25, 0x00	; 0
     69e:	81 e0       	ldi	r24, 0x01	; 1
     6a0:	92 fb       	bst	r25, 2
     6a2:	99 27       	eor	r25, r25
     6a4:	90 f9       	bld	r25, 0
     6a6:	98 27       	eor	r25, r24
     6a8:	9b a7       	std	Y+43, r25	; 0x2b
		buttons[1]=!read_bit(PINA,PA4);	// Lis l'état de l'entree du boutton 1 et l'inscrit dans buttons[1]
     6aa:	90 b1       	in	r25, 0x00	; 0
     6ac:	92 95       	swap	r25
     6ae:	91 70       	andi	r25, 0x01	; 1
     6b0:	98 27       	eor	r25, r24
     6b2:	9c a7       	std	Y+44, r25	; 0x2c
		buttons[2]=!read_bit(PIND,PD3);	// Lis l'état de l'entree du boutton 2 et l'inscrit dans buttons[2]
     6b4:	99 b1       	in	r25, 0x09	; 9
     6b6:	93 fb       	bst	r25, 3
     6b8:	99 27       	eor	r25, r25
     6ba:	90 f9       	bld	r25, 0
     6bc:	89 27       	eor	r24, r25
     6be:	8d a7       	std	Y+45, r24	; 0x2d
	*
	* cette fonction permet au bouton 3 d'agir comme un bouton Toogle qui active ou desactive la roue d'inertie
	*/
	void activateFlywheel()
	{
		if(!read_bit(PIND,PD4))
     6c0:	4c 99       	sbic	0x09, 4	; 9
     6c2:	18 c0       	rjmp	.+48     	; 0x6f4 <main+0xe6>
		{
			if(button3StateChanged)
     6c4:	89 81       	ldd	r24, Y+1	; 0x01
     6c6:	88 23       	and	r24, r24
     6c8:	b9 f0       	breq	.+46     	; 0x6f8 <main+0xea>
			{
				button3StateChanged=FALSE;
     6ca:	19 82       	std	Y+1, r1	; 0x01
				flywheelActivated = !flywheelActivated;//on modifie l'etat (active/desactive) de la roue d'inertie
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	9a 81       	ldd	r25, Y+2	; 0x02
     6d0:	91 11       	cpse	r25, r1
     6d2:	80 e0       	ldi	r24, 0x00	; 0
     6d4:	8a 83       	std	Y+2, r24	; 0x02
				buttons[3] = flywheelActivated;// buttons[3] représente l'état de la roue d'innertie
     6d6:	8e a7       	std	Y+46, r24	; 0x2e
	/*
	*fonction responsable d'ouvrir ou de fermer les dels
	*/
	void activateLEDs()
	{
		if(flywheelActivated)//si la roue d'inertie est activée les Dels sont activées
     6d8:	88 23       	and	r24, r24
     6da:	31 f0       	breq	.+12     	; 0x6e8 <main+0xda>
		{
			PORTB=set_bit(PORTB,PB0);
     6dc:	28 9a       	sbi	0x05, 0	; 5
			PORTB=set_bit(PORTB,PB1);
     6de:	29 9a       	sbi	0x05, 1	; 5
			PORTB=set_bit(PORTB,PB2);
     6e0:	2a 9a       	sbi	0x05, 2	; 5
			PORTB=set_bit(PORTB,PB3);
     6e2:	2b 9a       	sbi	0x05, 3	; 5
			PORTB=set_bit(PORTB,PB4);
     6e4:	2c 9a       	sbi	0x05, 4	; 5
     6e6:	08 c0       	rjmp	.+16     	; 0x6f8 <main+0xea>
		}	
		else//si la roue d'inertie est Désactivée les Dels sont Désactivées
		{
			PORTB=clear_bit(PORTB,PB0);
     6e8:	28 98       	cbi	0x05, 0	; 5
			PORTB=clear_bit(PORTB,PB1);
     6ea:	29 98       	cbi	0x05, 1	; 5
			PORTB=clear_bit(PORTB,PB2);
     6ec:	2a 98       	cbi	0x05, 2	; 5
			PORTB=clear_bit(PORTB,PB3);
     6ee:	2b 98       	cbi	0x05, 3	; 5
			PORTB=clear_bit(PORTB,PB4);
     6f0:	2c 98       	cbi	0x05, 4	; 5
     6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <main+0xea>
			}	
		}
		else
		{
			if(!button3StateChanged);
				button3StateChanged=TRUE;
     6f4:	81 e0       	ldi	r24, 0x01	; 1
     6f6:	89 83       	std	Y+1, r24	; 0x01
		slider    = 255-adc_read(PINA3);// Lis l'état de l'entree du potentiometres lineaire, l'inverse et l'inscrit dans slider
		buttons[0]=!read_bit(PINA,PA2);	// Lis l'état de l'entree du boutton 0 et l'inscrit dans buttons[0]
		buttons[1]=!read_bit(PINA,PA4);	// Lis l'état de l'entree du boutton 1 et l'inscrit dans buttons[1]
		buttons[2]=!read_bit(PIND,PD3);	// Lis l'état de l'entree du boutton 2 et l'inscrit dans buttons[2]
		activateFlywheel();				// Lis l'état de l'entree du boutton 3 et inscrit l'etat de la roue d'inertie dans buttons[3]
		buttons[4]=!read_bit(PIND,PD5);	// Lis l'état de l'entree du boutton 4 et l'inscrit dans buttons[4]
     6f8:	09 b1       	in	r16, 0x09	; 9
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	05 fb       	bst	r16, 5
     6fe:	00 27       	eor	r16, r16
     700:	00 f9       	bld	r16, 0
     702:	08 27       	eor	r16, r24
     704:	0f a7       	std	Y+47, r16	; 0x2f
		buttons[5]=!read_bit(PIND,PD6);	// Lis l'état de l'entree du boutton 5 et l'inscrit dans buttons[5]
     706:	e9 b0       	in	r14, 0x09	; 9
     708:	e6 fa       	bst	r14, 6
     70a:	ee 24       	eor	r14, r14
     70c:	e0 f8       	bld	r14, 0
     70e:	e8 26       	eor	r14, r24
     710:	e8 aa       	std	Y+48, r14	; 0x30
		buttons[6]=!read_bit(PIND,PD7);	// Lis l'état de l'entree du boutton 6 et l'inscrit dans buttons[6]
     712:	cc 24       	eor	r12, r12
     714:	c3 94       	inc	r12
     716:	4f 99       	sbic	0x09, 7	; 9
     718:	c1 2c       	mov	r12, r1
     71a:	c9 aa       	std	Y+49, r12	; 0x31
		
		//transmission des données
		uint8_t bools = combine_bool(buttons[0],buttons[1],buttons[2],buttons[3],buttons[4],buttons[5],buttons[6]);//transforme les 7 bits des boutons en un entier non signé de 8 bits, dont le dernier bit est egal a 1
     71c:	2e a5       	ldd	r18, Y+46	; 0x2e
     71e:	4d a5       	ldd	r20, Y+45	; 0x2d
     720:	6c a5       	ldd	r22, Y+44	; 0x2c
     722:	8b a5       	ldd	r24, Y+43	; 0x2b
     724:	0e 94 a2 00 	call	0x144	; 0x144 <combine_bool>
		send_packet(UART_0,joystickX,joystickY,slider,bools);//envoyer les données au Serveur (Vehicule) par Wi-fi
     728:	08 2f       	mov	r16, r24
     72a:	2a a9       	ldd	r18, Y+50	; 0x32
     72c:	4f 2d       	mov	r20, r15
     72e:	61 2f       	mov	r22, r17
     730:	80 e0       	ldi	r24, 0x00	; 0
     732:	0e 94 c7 00 	call	0x18e	; 0x18e <send_packet>
	*fonction responsable de l'ecriture sur l'ecran LCD
	*/
	void writeOnScreen()
	{
		//reset ecran
		lcd_clear_display();
     736:	0e 94 3b 02 	call	0x476	; 0x476 <lcd_clear_display>
		lcd_set_cursor_position(0,0);
     73a:	60 e0       	ldi	r22, 0x00	; 0
     73c:	80 e0       	ldi	r24, 0x00	; 0
     73e:	0e 94 40 02 	call	0x480	; 0x480 <lcd_set_cursor_position>
		//ecrire sur ecran
		sprintf(lcdScreenText,"B1%d,B2%d,B3%d,B4%d,B5%d,B6%d,B7%d,S%d",buttons[0],buttons[1],buttons[2],buttons[3],buttons[4],buttons[5],buttons[6],slider);
     742:	8a a9       	ldd	r24, Y+50	; 0x32
     744:	1f 92       	push	r1
     746:	8f 93       	push	r24
     748:	89 a9       	ldd	r24, Y+49	; 0x31
     74a:	1f 92       	push	r1
     74c:	8f 93       	push	r24
     74e:	88 a9       	ldd	r24, Y+48	; 0x30
     750:	1f 92       	push	r1
     752:	8f 93       	push	r24
     754:	8f a5       	ldd	r24, Y+47	; 0x2f
     756:	1f 92       	push	r1
     758:	8f 93       	push	r24
     75a:	8e a5       	ldd	r24, Y+46	; 0x2e
     75c:	1f 92       	push	r1
     75e:	8f 93       	push	r24
     760:	8d a5       	ldd	r24, Y+45	; 0x2d
     762:	1f 92       	push	r1
     764:	8f 93       	push	r24
     766:	8c a5       	ldd	r24, Y+44	; 0x2c
     768:	1f 92       	push	r1
     76a:	8f 93       	push	r24
     76c:	8b a5       	ldd	r24, Y+43	; 0x2b
     76e:	1f 92       	push	r1
     770:	8f 93       	push	r24
     772:	9f 92       	push	r9
     774:	8f 92       	push	r8
     776:	bf 92       	push	r11
     778:	af 92       	push	r10
     77a:	0e 94 66 05 	call	0xacc	; 0xacc <sprintf>
		lcd_write_string(lcdScreenText);
     77e:	c5 01       	movw	r24, r10
     780:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <lcd_write_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     784:	8f eb       	ldi	r24, 0xBF	; 191
     786:	9a e6       	ldi	r25, 0x6A	; 106
     788:	22 e0       	ldi	r18, 0x02	; 2
     78a:	81 50       	subi	r24, 0x01	; 1
     78c:	90 40       	sbci	r25, 0x00	; 0
     78e:	20 40       	sbci	r18, 0x00	; 0
     790:	e1 f7       	brne	.-8      	; 0x78a <main+0x17c>
     792:	00 c0       	rjmp	.+0      	; 0x794 <main+0x186>
     794:	00 00       	nop
     796:	0f b6       	in	r0, 0x3f	; 63
     798:	f8 94       	cli
     79a:	de bf       	out	0x3e, r29	; 62
     79c:	0f be       	out	0x3f, r0	; 63
     79e:	cd bf       	out	0x3d, r28	; 61
     7a0:	6e cf       	rjmp	.-292    	; 0x67e <main+0x70>

000007a2 <enable_UDRE_interupt>:
Static functions
******************************************************************************/

static void enable_UDRE_interupt(uart_e port){

    switch(port){
     7a2:	88 23       	and	r24, r24
     7a4:	19 f0       	breq	.+6      	; 0x7ac <enable_UDRE_interupt+0xa>
     7a6:	81 30       	cpi	r24, 0x01	; 1
     7a8:	39 f0       	breq	.+14     	; 0x7b8 <enable_UDRE_interupt+0x16>
     7aa:	08 95       	ret
    case UART_0:

        UCSR0B = set_bit(UCSR0B, UDRIE0);
     7ac:	e1 ec       	ldi	r30, 0xC1	; 193
     7ae:	f0 e0       	ldi	r31, 0x00	; 0
     7b0:	80 81       	ld	r24, Z
     7b2:	80 62       	ori	r24, 0x20	; 32
     7b4:	80 83       	st	Z, r24
        break;
     7b6:	08 95       	ret

    case UART_1:

        UCSR1B = set_bit(UCSR1B, UDRIE1);
     7b8:	e9 ec       	ldi	r30, 0xC9	; 201
     7ba:	f0 e0       	ldi	r31, 0x00	; 0
     7bc:	80 81       	ld	r24, Z
     7be:	80 62       	ori	r24, 0x20	; 32
     7c0:	80 83       	st	Z, r24
     7c2:	08 95       	ret

000007c4 <disable_UDRE_interupt>:
    }
}

static void disable_UDRE_interupt(uart_e port){

    switch(port){
     7c4:	88 23       	and	r24, r24
     7c6:	19 f0       	breq	.+6      	; 0x7ce <disable_UDRE_interupt+0xa>
     7c8:	81 30       	cpi	r24, 0x01	; 1
     7ca:	39 f0       	breq	.+14     	; 0x7da <disable_UDRE_interupt+0x16>
     7cc:	08 95       	ret
    case UART_0:

        UCSR0B = clear_bit(UCSR0B, UDRIE0);
     7ce:	e1 ec       	ldi	r30, 0xC1	; 193
     7d0:	f0 e0       	ldi	r31, 0x00	; 0
     7d2:	80 81       	ld	r24, Z
     7d4:	8f 7d       	andi	r24, 0xDF	; 223
     7d6:	80 83       	st	Z, r24
        break;
     7d8:	08 95       	ret

    case UART_1:

        UCSR1B = clear_bit(UCSR1B, UDRIE1);
     7da:	e9 ec       	ldi	r30, 0xC9	; 201
     7dc:	f0 e0       	ldi	r31, 0x00	; 0
     7de:	80 81       	ld	r24, Z
     7e0:	8f 7d       	andi	r24, 0xDF	; 223
     7e2:	80 83       	st	Z, r24
     7e4:	08 95       	ret

000007e6 <__vector_21>:

/**
    \brief interupt quand le data register (UDRE) est prêt à recevoir d'autres
    données pour UART 0
*/
ISR(USART0_UDRE_vect){
     7e6:	1f 92       	push	r1
     7e8:	0f 92       	push	r0
     7ea:	0f b6       	in	r0, 0x3f	; 63
     7ec:	0f 92       	push	r0
     7ee:	11 24       	eor	r1, r1
     7f0:	2f 93       	push	r18
     7f2:	3f 93       	push	r19
     7f4:	4f 93       	push	r20
     7f6:	5f 93       	push	r21
     7f8:	6f 93       	push	r22
     7fa:	7f 93       	push	r23
     7fc:	8f 93       	push	r24
     7fe:	9f 93       	push	r25
     800:	af 93       	push	r26
     802:	bf 93       	push	r27
     804:	ef 93       	push	r30
     806:	ff 93       	push	r31

    UDR0 = fifo_pop(&tx_fifo_0);
     808:	80 e5       	ldi	r24, 0x50	; 80
     80a:	91 e0       	ldi	r25, 0x01	; 1
     80c:	0e 94 55 01 	call	0x2aa	; 0x2aa <fifo_pop>
     810:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>

    if(fifo_is_empty(&tx_fifo_0) == TRUE){
     814:	80 e5       	ldi	r24, 0x50	; 80
     816:	91 e0       	ldi	r25, 0x01	; 1
     818:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <fifo_is_empty>
     81c:	81 30       	cpi	r24, 0x01	; 1
     81e:	19 f4       	brne	.+6      	; 0x826 <__vector_21+0x40>

        disable_UDRE_interupt(UART_0);
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <disable_UDRE_interupt>
    }
}
     826:	ff 91       	pop	r31
     828:	ef 91       	pop	r30
     82a:	bf 91       	pop	r27
     82c:	af 91       	pop	r26
     82e:	9f 91       	pop	r25
     830:	8f 91       	pop	r24
     832:	7f 91       	pop	r23
     834:	6f 91       	pop	r22
     836:	5f 91       	pop	r21
     838:	4f 91       	pop	r20
     83a:	3f 91       	pop	r19
     83c:	2f 91       	pop	r18
     83e:	0f 90       	pop	r0
     840:	0f be       	out	0x3f, r0	; 63
     842:	0f 90       	pop	r0
     844:	1f 90       	pop	r1
     846:	18 95       	reti

00000848 <__vector_20>:

/**
    \brief interupt quand le data register (UDR) a reçu une nouvelle donnée
    pour UART 0
*/
ISR(USART0_RX_vect){
     848:	1f 92       	push	r1
     84a:	0f 92       	push	r0
     84c:	0f b6       	in	r0, 0x3f	; 63
     84e:	0f 92       	push	r0
     850:	11 24       	eor	r1, r1
     852:	2f 93       	push	r18
     854:	3f 93       	push	r19
     856:	4f 93       	push	r20
     858:	5f 93       	push	r21
     85a:	6f 93       	push	r22
     85c:	7f 93       	push	r23
     85e:	8f 93       	push	r24
     860:	9f 93       	push	r25
     862:	af 93       	push	r26
     864:	bf 93       	push	r27
     866:	ef 93       	push	r30
     868:	ff 93       	push	r31

    fifo_push(&rx_fifo_0, UDR0);
     86a:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     86e:	88 e5       	ldi	r24, 0x58	; 88
     870:	91 e0       	ldi	r25, 0x01	; 1
     872:	0e 94 31 01 	call	0x262	; 0x262 <fifo_push>
}
     876:	ff 91       	pop	r31
     878:	ef 91       	pop	r30
     87a:	bf 91       	pop	r27
     87c:	af 91       	pop	r26
     87e:	9f 91       	pop	r25
     880:	8f 91       	pop	r24
     882:	7f 91       	pop	r23
     884:	6f 91       	pop	r22
     886:	5f 91       	pop	r21
     888:	4f 91       	pop	r20
     88a:	3f 91       	pop	r19
     88c:	2f 91       	pop	r18
     88e:	0f 90       	pop	r0
     890:	0f be       	out	0x3f, r0	; 63
     892:	0f 90       	pop	r0
     894:	1f 90       	pop	r1
     896:	18 95       	reti

00000898 <__vector_29>:

/**
    \brief interupt quand le data register (UDRE) est prêt à recevoir d'autres
    données pour UART 1
*/
ISR(USART1_UDRE_vect){
     898:	1f 92       	push	r1
     89a:	0f 92       	push	r0
     89c:	0f b6       	in	r0, 0x3f	; 63
     89e:	0f 92       	push	r0
     8a0:	11 24       	eor	r1, r1
     8a2:	2f 93       	push	r18
     8a4:	3f 93       	push	r19
     8a6:	4f 93       	push	r20
     8a8:	5f 93       	push	r21
     8aa:	6f 93       	push	r22
     8ac:	7f 93       	push	r23
     8ae:	8f 93       	push	r24
     8b0:	9f 93       	push	r25
     8b2:	af 93       	push	r26
     8b4:	bf 93       	push	r27
     8b6:	ef 93       	push	r30
     8b8:	ff 93       	push	r31

    UDR1 = fifo_pop(&tx_fifo_1);
     8ba:	80 e4       	ldi	r24, 0x40	; 64
     8bc:	91 e0       	ldi	r25, 0x01	; 1
     8be:	0e 94 55 01 	call	0x2aa	; 0x2aa <fifo_pop>
     8c2:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__DATA_REGION_ORIGIN__+0x6e>

    if(fifo_is_empty(&tx_fifo_1)){
     8c6:	80 e4       	ldi	r24, 0x40	; 64
     8c8:	91 e0       	ldi	r25, 0x01	; 1
     8ca:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <fifo_is_empty>
     8ce:	88 23       	and	r24, r24
     8d0:	19 f0       	breq	.+6      	; 0x8d8 <__vector_29+0x40>

        disable_UDRE_interupt(UART_1);
     8d2:	81 e0       	ldi	r24, 0x01	; 1
     8d4:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <disable_UDRE_interupt>
    }
}
     8d8:	ff 91       	pop	r31
     8da:	ef 91       	pop	r30
     8dc:	bf 91       	pop	r27
     8de:	af 91       	pop	r26
     8e0:	9f 91       	pop	r25
     8e2:	8f 91       	pop	r24
     8e4:	7f 91       	pop	r23
     8e6:	6f 91       	pop	r22
     8e8:	5f 91       	pop	r21
     8ea:	4f 91       	pop	r20
     8ec:	3f 91       	pop	r19
     8ee:	2f 91       	pop	r18
     8f0:	0f 90       	pop	r0
     8f2:	0f be       	out	0x3f, r0	; 63
     8f4:	0f 90       	pop	r0
     8f6:	1f 90       	pop	r1
     8f8:	18 95       	reti

000008fa <__vector_28>:

/**
    \brief interupt quand le data register (UDR) a reçu une nouvelle donnée
    pour UART 1
*/
ISR(USART1_RX_vect){
     8fa:	1f 92       	push	r1
     8fc:	0f 92       	push	r0
     8fe:	0f b6       	in	r0, 0x3f	; 63
     900:	0f 92       	push	r0
     902:	11 24       	eor	r1, r1
     904:	2f 93       	push	r18
     906:	3f 93       	push	r19
     908:	4f 93       	push	r20
     90a:	5f 93       	push	r21
     90c:	6f 93       	push	r22
     90e:	7f 93       	push	r23
     910:	8f 93       	push	r24
     912:	9f 93       	push	r25
     914:	af 93       	push	r26
     916:	bf 93       	push	r27
     918:	ef 93       	push	r30
     91a:	ff 93       	push	r31
	
    fifo_push(&rx_fifo_1, UDR1);
     91c:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__DATA_REGION_ORIGIN__+0x6e>
     920:	88 e4       	ldi	r24, 0x48	; 72
     922:	91 e0       	ldi	r25, 0x01	; 1
     924:	0e 94 31 01 	call	0x262	; 0x262 <fifo_push>
}
     928:	ff 91       	pop	r31
     92a:	ef 91       	pop	r30
     92c:	bf 91       	pop	r27
     92e:	af 91       	pop	r26
     930:	9f 91       	pop	r25
     932:	8f 91       	pop	r24
     934:	7f 91       	pop	r23
     936:	6f 91       	pop	r22
     938:	5f 91       	pop	r21
     93a:	4f 91       	pop	r20
     93c:	3f 91       	pop	r19
     93e:	2f 91       	pop	r18
     940:	0f 90       	pop	r0
     942:	0f be       	out	0x3f, r0	; 63
     944:	0f 90       	pop	r0
     946:	1f 90       	pop	r1
     948:	18 95       	reti

0000094a <uart_set_baudrate>:

/*** uart_set_baudrate ***/
/// \todo (iouri#1#): implémenter qqch qui empêche la corruption de la transmission.  La mise à jour de UBRR est immédiate.  Voir doc p. 196
void uart_set_baudrate(uart_e port, baudrate_e baudrate){

    switch(port){
     94a:	88 23       	and	r24, r24
     94c:	19 f0       	breq	.+6      	; 0x954 <uart_set_baudrate+0xa>
     94e:	81 30       	cpi	r24, 0x01	; 1
     950:	71 f0       	breq	.+28     	; 0x96e <uart_set_baudrate+0x24>
     952:	08 95       	ret
    case UART_0:

        UBRR0 = baudrate_to_UBRR[baudrate];
     954:	e6 2f       	mov	r30, r22
     956:	f0 e0       	ldi	r31, 0x00	; 0
     958:	ee 0f       	add	r30, r30
     95a:	ff 1f       	adc	r31, r31
     95c:	e5 5d       	subi	r30, 0xD5	; 213
     95e:	fe 4f       	sbci	r31, 0xFE	; 254
     960:	80 81       	ld	r24, Z
     962:	91 81       	ldd	r25, Z+1	; 0x01
     964:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
     968:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
        break;
     96c:	08 95       	ret

    case UART_1:

        UBRR1 = baudrate_to_UBRR[baudrate];
     96e:	e6 2f       	mov	r30, r22
     970:	f0 e0       	ldi	r31, 0x00	; 0
     972:	ee 0f       	add	r30, r30
     974:	ff 1f       	adc	r31, r31
     976:	e5 5d       	subi	r30, 0xD5	; 213
     978:	fe 4f       	sbci	r31, 0xFE	; 254
     97a:	80 81       	ld	r24, Z
     97c:	91 81       	ldd	r25, Z+1	; 0x01
     97e:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__DATA_REGION_ORIGIN__+0x6d>
     982:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__DATA_REGION_ORIGIN__+0x6c>
     986:	08 95       	ret

00000988 <uart_init>:

/******************************************************************************
Global functions
******************************************************************************/
/*** initialize uart ***/
void uart_init(uart_e port){
     988:	cf 93       	push	r28
     98a:	c8 2f       	mov	r28, r24

    switch(port){
     98c:	88 23       	and	r24, r24
     98e:	19 f0       	breq	.+6      	; 0x996 <uart_init+0xe>
     990:	81 30       	cpi	r24, 0x01	; 1
     992:	c1 f0       	breq	.+48     	; 0x9c4 <uart_init+0x3c>
     994:	2d c0       	rjmp	.+90     	; 0x9f0 <uart_init+0x68>
    case UART_0:

        /* configure asynchronous operation, no parity, 1 stop bit, 8 data bits,  */
        UCSR0C = (	(0 << UMSEL01) | /*USART Mode Select : Asynchronous USART*/
     996:	86 e0       	ldi	r24, 0x06	; 6
     998:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
                    (1 << UCSZ01) |  /*Character Size : 8-bit*/
                    (1 << UCSZ00) |  /*Character Size : 8-bit*/
                    (0 << UCPOL0));  /*0 when asynchronous mode is used*/

        /* enable RxD/TxD and ints */
        UCSR0B = (  (1 << RXCIE0) |  /*RX Complete Interrupt Enable*/
     99c:	88 e9       	ldi	r24, 0x98	; 152
     99e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
                    (0 << UDRIE0) |  /*Data Register Empty Interrupt Enable */
                    (1 << RXEN0) |   /*Receiver Enable*/
                    (1 << TXEN0) |   /*Transmitter Enable*/
                    (0 << UCSZ02));  /*Character Size : 8-bit*/

        UCSR0A = (  (0 << U2X0) |    /*Double the USART Transmission Speed*/
     9a2:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
                    (0 << MPCM0));   /*Multi-processor Communication Mode*/

        /*initialisation des fifos respectifs */
        fifo_init(&rx_fifo_0, (uint8_t*)rx_buffer_0, UART_0_RX_BUFFER_SIZE);
     9a6:	46 e9       	ldi	r20, 0x96	; 150
     9a8:	66 e1       	ldi	r22, 0x16	; 22
     9aa:	72 e0       	ldi	r23, 0x02	; 2
     9ac:	88 e5       	ldi	r24, 0x58	; 88
     9ae:	91 e0       	ldi	r25, 0x01	; 1
     9b0:	0e 94 26 01 	call	0x24c	; 0x24c <fifo_init>
        fifo_init(&tx_fifo_0, (uint8_t*)tx_buffer_0, UART_0_TX_BUFFER_SIZE);
     9b4:	46 e9       	ldi	r20, 0x96	; 150
     9b6:	60 e8       	ldi	r22, 0x80	; 128
     9b8:	71 e0       	ldi	r23, 0x01	; 1
     9ba:	80 e5       	ldi	r24, 0x50	; 80
     9bc:	91 e0       	ldi	r25, 0x01	; 1
     9be:	0e 94 26 01 	call	0x24c	; 0x24c <fifo_init>

        break;
     9c2:	16 c0       	rjmp	.+44     	; 0x9f0 <uart_init+0x68>


    case UART_1:
        /* configure asynchronous operation, no parity, 1 stop bit, 8 data bits,  */
        UCSR1C = (	(0 << UMSEL01) | /*USART Mode Select : Asynchronous USART*/
     9c4:	86 e0       	ldi	r24, 0x06	; 6
     9c6:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__DATA_REGION_ORIGIN__+0x6a>
                    (0 << USBS0) |	 /*Stop Bit Select : 1-bit*/
                    (1 << UCSZ01) |  /*Character Size : 8-bit*/
                    (1 << UCSZ00) |  /*Character Size : 8-bit*/
                    (0 << UCPOL0));  /*0 when asynchronous mode is used*/

        UCSR1B = (  (1 << RXCIE0) |  /*RX Complete Interrupt Enable*/
     9ca:	88 e9       	ldi	r24, 0x98	; 152
     9cc:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__DATA_REGION_ORIGIN__+0x69>
                    (0 << UDRIE0) |  /*Data Register Empty Interrupt Enable */
                    (1 << RXEN0) |   /*Receiver Enable*/
                    (1 << TXEN0) |   /*Transmitter Enable*/
                    (0 << UCSZ02));  /*Character Size : 8-bit*/

        UCSR1A = (  (0 << U2X0) |    /*Double the USART Transmission Speed*/
     9d0:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__DATA_REGION_ORIGIN__+0x68>
                    (0 << MPCM0));   /*Multi-processor Communication Mode*/

        /*initialisation des fifos respectifs */
        fifo_init(&rx_fifo_1, (uint8_t*)rx_buffer_1, UART_1_RX_BUFFER_SIZE);
     9d4:	40 e1       	ldi	r20, 0x10	; 16
     9d6:	60 e7       	ldi	r22, 0x70	; 112
     9d8:	71 e0       	ldi	r23, 0x01	; 1
     9da:	88 e4       	ldi	r24, 0x48	; 72
     9dc:	91 e0       	ldi	r25, 0x01	; 1
     9de:	0e 94 26 01 	call	0x24c	; 0x24c <fifo_init>
        fifo_init(&tx_fifo_1, (uint8_t*)tx_buffer_1, UART_1_TX_BUFFER_SIZE);
     9e2:	40 e1       	ldi	r20, 0x10	; 16
     9e4:	60 e6       	ldi	r22, 0x60	; 96
     9e6:	71 e0       	ldi	r23, 0x01	; 1
     9e8:	80 e4       	ldi	r24, 0x40	; 64
     9ea:	91 e0       	ldi	r25, 0x01	; 1
     9ec:	0e 94 26 01 	call	0x24c	; 0x24c <fifo_init>


        break;
    }

    uart_set_baudrate(port, DEFAULT_BAUDRATE);
     9f0:	62 e0       	ldi	r22, 0x02	; 2
     9f2:	8c 2f       	mov	r24, r28
     9f4:	0e 94 a5 04 	call	0x94a	; 0x94a <uart_set_baudrate>
}
     9f8:	cf 91       	pop	r28
     9fa:	08 95       	ret

000009fc <uart_put_byte>:
}



/*** uart_put_byte ***/
void uart_put_byte(uart_e port, uint8_t byte){
     9fc:	cf 93       	push	r28
     9fe:	df 93       	push	r29
     a00:	c8 2f       	mov	r28, r24
     a02:	d6 2f       	mov	r29, r22

    //on commence par désactiver l'interuption pour éviter que celle-ci
    //se produise pendant qu'on ajoute un caractère au buffer
    disable_UDRE_interupt(port);
     a04:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <disable_UDRE_interupt>

    fifo_push(tx_fifo_list[port], byte);
     a08:	ec 2f       	mov	r30, r28
     a0a:	f0 e0       	ldi	r31, 0x00	; 0
     a0c:	ee 0f       	add	r30, r30
     a0e:	ff 1f       	adc	r31, r31
     a10:	e9 5d       	subi	r30, 0xD9	; 217
     a12:	fe 4f       	sbci	r31, 0xFE	; 254
     a14:	6d 2f       	mov	r22, r29
     a16:	80 81       	ld	r24, Z
     a18:	91 81       	ldd	r25, Z+1	; 0x01
     a1a:	0e 94 31 01 	call	0x262	; 0x262 <fifo_push>

    // On active l'interrupt après avoir incrémenté le pointeur
    // d'entré pour éviter un dead lock assez casse-tête
    enable_UDRE_interupt(port);
     a1e:	8c 2f       	mov	r24, r28
     a20:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <enable_UDRE_interupt>

}
     a24:	df 91       	pop	r29
     a26:	cf 91       	pop	r28
     a28:	08 95       	ret

00000a2a <uart_put_string>:


/*** uart_put_string ***/
void uart_put_string(uart_e port, char* string){
     a2a:	cf 92       	push	r12
     a2c:	df 92       	push	r13
     a2e:	ef 92       	push	r14
     a30:	ff 92       	push	r15
     a32:	0f 93       	push	r16
     a34:	1f 93       	push	r17
     a36:	cf 93       	push	r28
     a38:	df 93       	push	r29

	uint8_t i = 0;

	while(string[i] != '\0'){
     a3a:	fb 01       	movw	r30, r22
     a3c:	90 81       	ld	r25, Z
     a3e:	99 23       	and	r25, r25
     a40:	b1 f1       	breq	.+108    	; 0xaae <uart_put_string+0x84>
     a42:	6b 01       	movw	r12, r22
     a44:	d8 2f       	mov	r29, r24
     a46:	c0 e0       	ldi	r28, 0x00	; 0

		// On attend à l'infini qu'il y ait de la place dans le buffer. Je ne me
		// souviens pas d'avoir écrit ça, et je ne trouve pas ça du très beau code.
		//TODO évaluer la pertinance
		while(fifo_is_full(tx_fifo_list[port])  == TRUE);
     a48:	e8 2f       	mov	r30, r24
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	ee 0f       	add	r30, r30
     a4e:	ff 1f       	adc	r31, r31
     a50:	e9 5d       	subi	r30, 0xD9	; 217
     a52:	fe 4f       	sbci	r31, 0xFE	; 254
     a54:	e0 80       	ld	r14, Z
     a56:	f1 80       	ldd	r15, Z+1	; 0x01
     a58:	c7 01       	movw	r24, r14
     a5a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <fifo_is_full>
     a5e:	81 30       	cpi	r24, 0x01	; 1
     a60:	d9 f3       	breq	.-10     	; 0xa58 <uart_put_string+0x2e>

		//on commence par désactiver l'interuption pour éviter que celle-ci
		//se produise pendant qu'on ajoute un caractère au buffer
		disable_UDRE_interupt(port);
     a62:	8d 2f       	mov	r24, r29
     a64:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <disable_UDRE_interupt>

		while((string[i] != '\0') && (fifo_is_full(tx_fifo_list[port])  == FALSE)){
     a68:	86 01       	movw	r16, r12
     a6a:	0c 0f       	add	r16, r28
     a6c:	11 1d       	adc	r17, r1
     a6e:	f8 01       	movw	r30, r16
     a70:	80 81       	ld	r24, Z
     a72:	81 11       	cpse	r24, r1
     a74:	0e c0       	rjmp	.+28     	; 0xa92 <uart_put_string+0x68>
     a76:	12 c0       	rjmp	.+36     	; 0xa9c <uart_put_string+0x72>

			fifo_push(tx_fifo_list[port], string[i]);
     a78:	f8 01       	movw	r30, r16
     a7a:	60 81       	ld	r22, Z
     a7c:	c7 01       	movw	r24, r14
     a7e:	0e 94 31 01 	call	0x262	; 0x262 <fifo_push>

			i++;
     a82:	cf 5f       	subi	r28, 0xFF	; 255

		//on commence par désactiver l'interuption pour éviter que celle-ci
		//se produise pendant qu'on ajoute un caractère au buffer
		disable_UDRE_interupt(port);

		while((string[i] != '\0') && (fifo_is_full(tx_fifo_list[port])  == FALSE)){
     a84:	86 01       	movw	r16, r12
     a86:	0c 0f       	add	r16, r28
     a88:	11 1d       	adc	r17, r1
     a8a:	f8 01       	movw	r30, r16
     a8c:	90 81       	ld	r25, Z
     a8e:	99 23       	and	r25, r25
     a90:	29 f0       	breq	.+10     	; 0xa9c <uart_put_string+0x72>
     a92:	c7 01       	movw	r24, r14
     a94:	0e 94 7e 01 	call	0x2fc	; 0x2fc <fifo_is_full>
     a98:	88 23       	and	r24, r24
     a9a:	71 f3       	breq	.-36     	; 0xa78 <uart_put_string+0x4e>
			i++;
		}

		// On active l'interrupt après avoir incrémenté le pointeur
		// d'entré pour éviter un dead lock assez casse-tête
		enable_UDRE_interupt(port);
     a9c:	8d 2f       	mov	r24, r29
     a9e:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <enable_UDRE_interupt>
/*** uart_put_string ***/
void uart_put_string(uart_e port, char* string){

	uint8_t i = 0;

	while(string[i] != '\0'){
     aa2:	f6 01       	movw	r30, r12
     aa4:	ec 0f       	add	r30, r28
     aa6:	f1 1d       	adc	r31, r1
     aa8:	80 81       	ld	r24, Z
     aaa:	81 11       	cpse	r24, r1
     aac:	d5 cf       	rjmp	.-86     	; 0xa58 <uart_put_string+0x2e>
		// On active l'interrupt après avoir incrémenté le pointeur
		// d'entré pour éviter un dead lock assez casse-tête
		enable_UDRE_interupt(port);

	}
}
     aae:	df 91       	pop	r29
     ab0:	cf 91       	pop	r28
     ab2:	1f 91       	pop	r17
     ab4:	0f 91       	pop	r16
     ab6:	ff 90       	pop	r15
     ab8:	ef 90       	pop	r14
     aba:	df 90       	pop	r13
     abc:	cf 90       	pop	r12
     abe:	08 95       	ret

00000ac0 <__tablejump2__>:
     ac0:	ee 0f       	add	r30, r30
     ac2:	ff 1f       	adc	r31, r31
     ac4:	05 90       	lpm	r0, Z+
     ac6:	f4 91       	lpm	r31, Z
     ac8:	e0 2d       	mov	r30, r0
     aca:	09 94       	ijmp

00000acc <sprintf>:
     acc:	ae e0       	ldi	r26, 0x0E	; 14
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	ec e6       	ldi	r30, 0x6C	; 108
     ad2:	f5 e0       	ldi	r31, 0x05	; 5
     ad4:	0c 94 27 08 	jmp	0x104e	; 0x104e <__prologue_saves__+0x1c>
     ad8:	0d 89       	ldd	r16, Y+21	; 0x15
     ada:	1e 89       	ldd	r17, Y+22	; 0x16
     adc:	86 e0       	ldi	r24, 0x06	; 6
     ade:	8c 83       	std	Y+4, r24	; 0x04
     ae0:	1a 83       	std	Y+2, r17	; 0x02
     ae2:	09 83       	std	Y+1, r16	; 0x01
     ae4:	8f ef       	ldi	r24, 0xFF	; 255
     ae6:	9f e7       	ldi	r25, 0x7F	; 127
     ae8:	9e 83       	std	Y+6, r25	; 0x06
     aea:	8d 83       	std	Y+5, r24	; 0x05
     aec:	ae 01       	movw	r20, r28
     aee:	47 5e       	subi	r20, 0xE7	; 231
     af0:	5f 4f       	sbci	r21, 0xFF	; 255
     af2:	6f 89       	ldd	r22, Y+23	; 0x17
     af4:	78 8d       	ldd	r23, Y+24	; 0x18
     af6:	ce 01       	movw	r24, r28
     af8:	01 96       	adiw	r24, 0x01	; 1
     afa:	0e 94 88 05 	call	0xb10	; 0xb10 <vfprintf>
     afe:	ef 81       	ldd	r30, Y+7	; 0x07
     b00:	f8 85       	ldd	r31, Y+8	; 0x08
     b02:	e0 0f       	add	r30, r16
     b04:	f1 1f       	adc	r31, r17
     b06:	10 82       	st	Z, r1
     b08:	2e 96       	adiw	r28, 0x0e	; 14
     b0a:	e4 e0       	ldi	r30, 0x04	; 4
     b0c:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__epilogue_restores__+0x1c>

00000b10 <vfprintf>:
     b10:	ab e0       	ldi	r26, 0x0B	; 11
     b12:	b0 e0       	ldi	r27, 0x00	; 0
     b14:	ee e8       	ldi	r30, 0x8E	; 142
     b16:	f5 e0       	ldi	r31, 0x05	; 5
     b18:	0c 94 19 08 	jmp	0x1032	; 0x1032 <__prologue_saves__>
     b1c:	6c 01       	movw	r12, r24
     b1e:	7b 01       	movw	r14, r22
     b20:	8a 01       	movw	r16, r20
     b22:	fc 01       	movw	r30, r24
     b24:	17 82       	std	Z+7, r1	; 0x07
     b26:	16 82       	std	Z+6, r1	; 0x06
     b28:	83 81       	ldd	r24, Z+3	; 0x03
     b2a:	81 ff       	sbrs	r24, 1
     b2c:	cc c1       	rjmp	.+920    	; 0xec6 <vfprintf+0x3b6>
     b2e:	ce 01       	movw	r24, r28
     b30:	01 96       	adiw	r24, 0x01	; 1
     b32:	3c 01       	movw	r6, r24
     b34:	f6 01       	movw	r30, r12
     b36:	93 81       	ldd	r25, Z+3	; 0x03
     b38:	f7 01       	movw	r30, r14
     b3a:	93 fd       	sbrc	r25, 3
     b3c:	85 91       	lpm	r24, Z+
     b3e:	93 ff       	sbrs	r25, 3
     b40:	81 91       	ld	r24, Z+
     b42:	7f 01       	movw	r14, r30
     b44:	88 23       	and	r24, r24
     b46:	09 f4       	brne	.+2      	; 0xb4a <vfprintf+0x3a>
     b48:	ba c1       	rjmp	.+884    	; 0xebe <vfprintf+0x3ae>
     b4a:	85 32       	cpi	r24, 0x25	; 37
     b4c:	39 f4       	brne	.+14     	; 0xb5c <vfprintf+0x4c>
     b4e:	93 fd       	sbrc	r25, 3
     b50:	85 91       	lpm	r24, Z+
     b52:	93 ff       	sbrs	r25, 3
     b54:	81 91       	ld	r24, Z+
     b56:	7f 01       	movw	r14, r30
     b58:	85 32       	cpi	r24, 0x25	; 37
     b5a:	29 f4       	brne	.+10     	; 0xb66 <vfprintf+0x56>
     b5c:	b6 01       	movw	r22, r12
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	0e 94 7f 07 	call	0xefe	; 0xefe <fputc>
     b64:	e7 cf       	rjmp	.-50     	; 0xb34 <vfprintf+0x24>
     b66:	91 2c       	mov	r9, r1
     b68:	21 2c       	mov	r2, r1
     b6a:	31 2c       	mov	r3, r1
     b6c:	ff e1       	ldi	r31, 0x1F	; 31
     b6e:	f3 15       	cp	r31, r3
     b70:	d8 f0       	brcs	.+54     	; 0xba8 <vfprintf+0x98>
     b72:	8b 32       	cpi	r24, 0x2B	; 43
     b74:	79 f0       	breq	.+30     	; 0xb94 <vfprintf+0x84>
     b76:	38 f4       	brcc	.+14     	; 0xb86 <vfprintf+0x76>
     b78:	80 32       	cpi	r24, 0x20	; 32
     b7a:	79 f0       	breq	.+30     	; 0xb9a <vfprintf+0x8a>
     b7c:	83 32       	cpi	r24, 0x23	; 35
     b7e:	a1 f4       	brne	.+40     	; 0xba8 <vfprintf+0x98>
     b80:	23 2d       	mov	r18, r3
     b82:	20 61       	ori	r18, 0x10	; 16
     b84:	1d c0       	rjmp	.+58     	; 0xbc0 <vfprintf+0xb0>
     b86:	8d 32       	cpi	r24, 0x2D	; 45
     b88:	61 f0       	breq	.+24     	; 0xba2 <vfprintf+0x92>
     b8a:	80 33       	cpi	r24, 0x30	; 48
     b8c:	69 f4       	brne	.+26     	; 0xba8 <vfprintf+0x98>
     b8e:	23 2d       	mov	r18, r3
     b90:	21 60       	ori	r18, 0x01	; 1
     b92:	16 c0       	rjmp	.+44     	; 0xbc0 <vfprintf+0xb0>
     b94:	83 2d       	mov	r24, r3
     b96:	82 60       	ori	r24, 0x02	; 2
     b98:	38 2e       	mov	r3, r24
     b9a:	e3 2d       	mov	r30, r3
     b9c:	e4 60       	ori	r30, 0x04	; 4
     b9e:	3e 2e       	mov	r3, r30
     ba0:	2a c0       	rjmp	.+84     	; 0xbf6 <vfprintf+0xe6>
     ba2:	f3 2d       	mov	r31, r3
     ba4:	f8 60       	ori	r31, 0x08	; 8
     ba6:	1d c0       	rjmp	.+58     	; 0xbe2 <vfprintf+0xd2>
     ba8:	37 fc       	sbrc	r3, 7
     baa:	2d c0       	rjmp	.+90     	; 0xc06 <vfprintf+0xf6>
     bac:	20 ed       	ldi	r18, 0xD0	; 208
     bae:	28 0f       	add	r18, r24
     bb0:	2a 30       	cpi	r18, 0x0A	; 10
     bb2:	40 f0       	brcs	.+16     	; 0xbc4 <vfprintf+0xb4>
     bb4:	8e 32       	cpi	r24, 0x2E	; 46
     bb6:	b9 f4       	brne	.+46     	; 0xbe6 <vfprintf+0xd6>
     bb8:	36 fc       	sbrc	r3, 6
     bba:	81 c1       	rjmp	.+770    	; 0xebe <vfprintf+0x3ae>
     bbc:	23 2d       	mov	r18, r3
     bbe:	20 64       	ori	r18, 0x40	; 64
     bc0:	32 2e       	mov	r3, r18
     bc2:	19 c0       	rjmp	.+50     	; 0xbf6 <vfprintf+0xe6>
     bc4:	36 fe       	sbrs	r3, 6
     bc6:	06 c0       	rjmp	.+12     	; 0xbd4 <vfprintf+0xc4>
     bc8:	8a e0       	ldi	r24, 0x0A	; 10
     bca:	98 9e       	mul	r9, r24
     bcc:	20 0d       	add	r18, r0
     bce:	11 24       	eor	r1, r1
     bd0:	92 2e       	mov	r9, r18
     bd2:	11 c0       	rjmp	.+34     	; 0xbf6 <vfprintf+0xe6>
     bd4:	ea e0       	ldi	r30, 0x0A	; 10
     bd6:	2e 9e       	mul	r2, r30
     bd8:	20 0d       	add	r18, r0
     bda:	11 24       	eor	r1, r1
     bdc:	22 2e       	mov	r2, r18
     bde:	f3 2d       	mov	r31, r3
     be0:	f0 62       	ori	r31, 0x20	; 32
     be2:	3f 2e       	mov	r3, r31
     be4:	08 c0       	rjmp	.+16     	; 0xbf6 <vfprintf+0xe6>
     be6:	8c 36       	cpi	r24, 0x6C	; 108
     be8:	21 f4       	brne	.+8      	; 0xbf2 <vfprintf+0xe2>
     bea:	83 2d       	mov	r24, r3
     bec:	80 68       	ori	r24, 0x80	; 128
     bee:	38 2e       	mov	r3, r24
     bf0:	02 c0       	rjmp	.+4      	; 0xbf6 <vfprintf+0xe6>
     bf2:	88 36       	cpi	r24, 0x68	; 104
     bf4:	41 f4       	brne	.+16     	; 0xc06 <vfprintf+0xf6>
     bf6:	f7 01       	movw	r30, r14
     bf8:	93 fd       	sbrc	r25, 3
     bfa:	85 91       	lpm	r24, Z+
     bfc:	93 ff       	sbrs	r25, 3
     bfe:	81 91       	ld	r24, Z+
     c00:	7f 01       	movw	r14, r30
     c02:	81 11       	cpse	r24, r1
     c04:	b3 cf       	rjmp	.-154    	; 0xb6c <vfprintf+0x5c>
     c06:	98 2f       	mov	r25, r24
     c08:	9f 7d       	andi	r25, 0xDF	; 223
     c0a:	95 54       	subi	r25, 0x45	; 69
     c0c:	93 30       	cpi	r25, 0x03	; 3
     c0e:	28 f4       	brcc	.+10     	; 0xc1a <vfprintf+0x10a>
     c10:	0c 5f       	subi	r16, 0xFC	; 252
     c12:	1f 4f       	sbci	r17, 0xFF	; 255
     c14:	9f e3       	ldi	r25, 0x3F	; 63
     c16:	99 83       	std	Y+1, r25	; 0x01
     c18:	0d c0       	rjmp	.+26     	; 0xc34 <vfprintf+0x124>
     c1a:	83 36       	cpi	r24, 0x63	; 99
     c1c:	31 f0       	breq	.+12     	; 0xc2a <vfprintf+0x11a>
     c1e:	83 37       	cpi	r24, 0x73	; 115
     c20:	71 f0       	breq	.+28     	; 0xc3e <vfprintf+0x12e>
     c22:	83 35       	cpi	r24, 0x53	; 83
     c24:	09 f0       	breq	.+2      	; 0xc28 <vfprintf+0x118>
     c26:	59 c0       	rjmp	.+178    	; 0xcda <vfprintf+0x1ca>
     c28:	21 c0       	rjmp	.+66     	; 0xc6c <vfprintf+0x15c>
     c2a:	f8 01       	movw	r30, r16
     c2c:	80 81       	ld	r24, Z
     c2e:	89 83       	std	Y+1, r24	; 0x01
     c30:	0e 5f       	subi	r16, 0xFE	; 254
     c32:	1f 4f       	sbci	r17, 0xFF	; 255
     c34:	88 24       	eor	r8, r8
     c36:	83 94       	inc	r8
     c38:	91 2c       	mov	r9, r1
     c3a:	53 01       	movw	r10, r6
     c3c:	13 c0       	rjmp	.+38     	; 0xc64 <vfprintf+0x154>
     c3e:	28 01       	movw	r4, r16
     c40:	f2 e0       	ldi	r31, 0x02	; 2
     c42:	4f 0e       	add	r4, r31
     c44:	51 1c       	adc	r5, r1
     c46:	f8 01       	movw	r30, r16
     c48:	a0 80       	ld	r10, Z
     c4a:	b1 80       	ldd	r11, Z+1	; 0x01
     c4c:	36 fe       	sbrs	r3, 6
     c4e:	03 c0       	rjmp	.+6      	; 0xc56 <vfprintf+0x146>
     c50:	69 2d       	mov	r22, r9
     c52:	70 e0       	ldi	r23, 0x00	; 0
     c54:	02 c0       	rjmp	.+4      	; 0xc5a <vfprintf+0x14a>
     c56:	6f ef       	ldi	r22, 0xFF	; 255
     c58:	7f ef       	ldi	r23, 0xFF	; 255
     c5a:	c5 01       	movw	r24, r10
     c5c:	0e 94 74 07 	call	0xee8	; 0xee8 <strnlen>
     c60:	4c 01       	movw	r8, r24
     c62:	82 01       	movw	r16, r4
     c64:	f3 2d       	mov	r31, r3
     c66:	ff 77       	andi	r31, 0x7F	; 127
     c68:	3f 2e       	mov	r3, r31
     c6a:	16 c0       	rjmp	.+44     	; 0xc98 <vfprintf+0x188>
     c6c:	28 01       	movw	r4, r16
     c6e:	22 e0       	ldi	r18, 0x02	; 2
     c70:	42 0e       	add	r4, r18
     c72:	51 1c       	adc	r5, r1
     c74:	f8 01       	movw	r30, r16
     c76:	a0 80       	ld	r10, Z
     c78:	b1 80       	ldd	r11, Z+1	; 0x01
     c7a:	36 fe       	sbrs	r3, 6
     c7c:	03 c0       	rjmp	.+6      	; 0xc84 <vfprintf+0x174>
     c7e:	69 2d       	mov	r22, r9
     c80:	70 e0       	ldi	r23, 0x00	; 0
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <vfprintf+0x178>
     c84:	6f ef       	ldi	r22, 0xFF	; 255
     c86:	7f ef       	ldi	r23, 0xFF	; 255
     c88:	c5 01       	movw	r24, r10
     c8a:	0e 94 69 07 	call	0xed2	; 0xed2 <strnlen_P>
     c8e:	4c 01       	movw	r8, r24
     c90:	f3 2d       	mov	r31, r3
     c92:	f0 68       	ori	r31, 0x80	; 128
     c94:	3f 2e       	mov	r3, r31
     c96:	82 01       	movw	r16, r4
     c98:	33 fc       	sbrc	r3, 3
     c9a:	1b c0       	rjmp	.+54     	; 0xcd2 <vfprintf+0x1c2>
     c9c:	82 2d       	mov	r24, r2
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	88 16       	cp	r8, r24
     ca2:	99 06       	cpc	r9, r25
     ca4:	b0 f4       	brcc	.+44     	; 0xcd2 <vfprintf+0x1c2>
     ca6:	b6 01       	movw	r22, r12
     ca8:	80 e2       	ldi	r24, 0x20	; 32
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	0e 94 7f 07 	call	0xefe	; 0xefe <fputc>
     cb0:	2a 94       	dec	r2
     cb2:	f4 cf       	rjmp	.-24     	; 0xc9c <vfprintf+0x18c>
     cb4:	f5 01       	movw	r30, r10
     cb6:	37 fc       	sbrc	r3, 7
     cb8:	85 91       	lpm	r24, Z+
     cba:	37 fe       	sbrs	r3, 7
     cbc:	81 91       	ld	r24, Z+
     cbe:	5f 01       	movw	r10, r30
     cc0:	b6 01       	movw	r22, r12
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	0e 94 7f 07 	call	0xefe	; 0xefe <fputc>
     cc8:	21 10       	cpse	r2, r1
     cca:	2a 94       	dec	r2
     ccc:	21 e0       	ldi	r18, 0x01	; 1
     cce:	82 1a       	sub	r8, r18
     cd0:	91 08       	sbc	r9, r1
     cd2:	81 14       	cp	r8, r1
     cd4:	91 04       	cpc	r9, r1
     cd6:	71 f7       	brne	.-36     	; 0xcb4 <vfprintf+0x1a4>
     cd8:	e8 c0       	rjmp	.+464    	; 0xeaa <vfprintf+0x39a>
     cda:	84 36       	cpi	r24, 0x64	; 100
     cdc:	11 f0       	breq	.+4      	; 0xce2 <vfprintf+0x1d2>
     cde:	89 36       	cpi	r24, 0x69	; 105
     ce0:	41 f5       	brne	.+80     	; 0xd32 <vfprintf+0x222>
     ce2:	f8 01       	movw	r30, r16
     ce4:	37 fe       	sbrs	r3, 7
     ce6:	07 c0       	rjmp	.+14     	; 0xcf6 <vfprintf+0x1e6>
     ce8:	60 81       	ld	r22, Z
     cea:	71 81       	ldd	r23, Z+1	; 0x01
     cec:	82 81       	ldd	r24, Z+2	; 0x02
     cee:	93 81       	ldd	r25, Z+3	; 0x03
     cf0:	0c 5f       	subi	r16, 0xFC	; 252
     cf2:	1f 4f       	sbci	r17, 0xFF	; 255
     cf4:	08 c0       	rjmp	.+16     	; 0xd06 <vfprintf+0x1f6>
     cf6:	60 81       	ld	r22, Z
     cf8:	71 81       	ldd	r23, Z+1	; 0x01
     cfa:	07 2e       	mov	r0, r23
     cfc:	00 0c       	add	r0, r0
     cfe:	88 0b       	sbc	r24, r24
     d00:	99 0b       	sbc	r25, r25
     d02:	0e 5f       	subi	r16, 0xFE	; 254
     d04:	1f 4f       	sbci	r17, 0xFF	; 255
     d06:	f3 2d       	mov	r31, r3
     d08:	ff 76       	andi	r31, 0x6F	; 111
     d0a:	3f 2e       	mov	r3, r31
     d0c:	97 ff       	sbrs	r25, 7
     d0e:	09 c0       	rjmp	.+18     	; 0xd22 <vfprintf+0x212>
     d10:	90 95       	com	r25
     d12:	80 95       	com	r24
     d14:	70 95       	com	r23
     d16:	61 95       	neg	r22
     d18:	7f 4f       	sbci	r23, 0xFF	; 255
     d1a:	8f 4f       	sbci	r24, 0xFF	; 255
     d1c:	9f 4f       	sbci	r25, 0xFF	; 255
     d1e:	f0 68       	ori	r31, 0x80	; 128
     d20:	3f 2e       	mov	r3, r31
     d22:	2a e0       	ldi	r18, 0x0A	; 10
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	a3 01       	movw	r20, r6
     d28:	0e 94 bb 07 	call	0xf76	; 0xf76 <__ultoa_invert>
     d2c:	88 2e       	mov	r8, r24
     d2e:	86 18       	sub	r8, r6
     d30:	45 c0       	rjmp	.+138    	; 0xdbc <vfprintf+0x2ac>
     d32:	85 37       	cpi	r24, 0x75	; 117
     d34:	31 f4       	brne	.+12     	; 0xd42 <vfprintf+0x232>
     d36:	23 2d       	mov	r18, r3
     d38:	2f 7e       	andi	r18, 0xEF	; 239
     d3a:	b2 2e       	mov	r11, r18
     d3c:	2a e0       	ldi	r18, 0x0A	; 10
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	25 c0       	rjmp	.+74     	; 0xd8c <vfprintf+0x27c>
     d42:	93 2d       	mov	r25, r3
     d44:	99 7f       	andi	r25, 0xF9	; 249
     d46:	b9 2e       	mov	r11, r25
     d48:	8f 36       	cpi	r24, 0x6F	; 111
     d4a:	c1 f0       	breq	.+48     	; 0xd7c <vfprintf+0x26c>
     d4c:	18 f4       	brcc	.+6      	; 0xd54 <vfprintf+0x244>
     d4e:	88 35       	cpi	r24, 0x58	; 88
     d50:	79 f0       	breq	.+30     	; 0xd70 <vfprintf+0x260>
     d52:	b5 c0       	rjmp	.+362    	; 0xebe <vfprintf+0x3ae>
     d54:	80 37       	cpi	r24, 0x70	; 112
     d56:	19 f0       	breq	.+6      	; 0xd5e <vfprintf+0x24e>
     d58:	88 37       	cpi	r24, 0x78	; 120
     d5a:	21 f0       	breq	.+8      	; 0xd64 <vfprintf+0x254>
     d5c:	b0 c0       	rjmp	.+352    	; 0xebe <vfprintf+0x3ae>
     d5e:	e9 2f       	mov	r30, r25
     d60:	e0 61       	ori	r30, 0x10	; 16
     d62:	be 2e       	mov	r11, r30
     d64:	b4 fe       	sbrs	r11, 4
     d66:	0d c0       	rjmp	.+26     	; 0xd82 <vfprintf+0x272>
     d68:	fb 2d       	mov	r31, r11
     d6a:	f4 60       	ori	r31, 0x04	; 4
     d6c:	bf 2e       	mov	r11, r31
     d6e:	09 c0       	rjmp	.+18     	; 0xd82 <vfprintf+0x272>
     d70:	34 fe       	sbrs	r3, 4
     d72:	0a c0       	rjmp	.+20     	; 0xd88 <vfprintf+0x278>
     d74:	29 2f       	mov	r18, r25
     d76:	26 60       	ori	r18, 0x06	; 6
     d78:	b2 2e       	mov	r11, r18
     d7a:	06 c0       	rjmp	.+12     	; 0xd88 <vfprintf+0x278>
     d7c:	28 e0       	ldi	r18, 0x08	; 8
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	05 c0       	rjmp	.+10     	; 0xd8c <vfprintf+0x27c>
     d82:	20 e1       	ldi	r18, 0x10	; 16
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <vfprintf+0x27c>
     d88:	20 e1       	ldi	r18, 0x10	; 16
     d8a:	32 e0       	ldi	r19, 0x02	; 2
     d8c:	f8 01       	movw	r30, r16
     d8e:	b7 fe       	sbrs	r11, 7
     d90:	07 c0       	rjmp	.+14     	; 0xda0 <vfprintf+0x290>
     d92:	60 81       	ld	r22, Z
     d94:	71 81       	ldd	r23, Z+1	; 0x01
     d96:	82 81       	ldd	r24, Z+2	; 0x02
     d98:	93 81       	ldd	r25, Z+3	; 0x03
     d9a:	0c 5f       	subi	r16, 0xFC	; 252
     d9c:	1f 4f       	sbci	r17, 0xFF	; 255
     d9e:	06 c0       	rjmp	.+12     	; 0xdac <vfprintf+0x29c>
     da0:	60 81       	ld	r22, Z
     da2:	71 81       	ldd	r23, Z+1	; 0x01
     da4:	80 e0       	ldi	r24, 0x00	; 0
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	0e 5f       	subi	r16, 0xFE	; 254
     daa:	1f 4f       	sbci	r17, 0xFF	; 255
     dac:	a3 01       	movw	r20, r6
     dae:	0e 94 bb 07 	call	0xf76	; 0xf76 <__ultoa_invert>
     db2:	88 2e       	mov	r8, r24
     db4:	86 18       	sub	r8, r6
     db6:	fb 2d       	mov	r31, r11
     db8:	ff 77       	andi	r31, 0x7F	; 127
     dba:	3f 2e       	mov	r3, r31
     dbc:	36 fe       	sbrs	r3, 6
     dbe:	0d c0       	rjmp	.+26     	; 0xdda <vfprintf+0x2ca>
     dc0:	23 2d       	mov	r18, r3
     dc2:	2e 7f       	andi	r18, 0xFE	; 254
     dc4:	a2 2e       	mov	r10, r18
     dc6:	89 14       	cp	r8, r9
     dc8:	58 f4       	brcc	.+22     	; 0xde0 <vfprintf+0x2d0>
     dca:	34 fe       	sbrs	r3, 4
     dcc:	0b c0       	rjmp	.+22     	; 0xde4 <vfprintf+0x2d4>
     dce:	32 fc       	sbrc	r3, 2
     dd0:	09 c0       	rjmp	.+18     	; 0xde4 <vfprintf+0x2d4>
     dd2:	83 2d       	mov	r24, r3
     dd4:	8e 7e       	andi	r24, 0xEE	; 238
     dd6:	a8 2e       	mov	r10, r24
     dd8:	05 c0       	rjmp	.+10     	; 0xde4 <vfprintf+0x2d4>
     dda:	b8 2c       	mov	r11, r8
     ddc:	a3 2c       	mov	r10, r3
     dde:	03 c0       	rjmp	.+6      	; 0xde6 <vfprintf+0x2d6>
     de0:	b8 2c       	mov	r11, r8
     de2:	01 c0       	rjmp	.+2      	; 0xde6 <vfprintf+0x2d6>
     de4:	b9 2c       	mov	r11, r9
     de6:	a4 fe       	sbrs	r10, 4
     de8:	0f c0       	rjmp	.+30     	; 0xe08 <vfprintf+0x2f8>
     dea:	fe 01       	movw	r30, r28
     dec:	e8 0d       	add	r30, r8
     dee:	f1 1d       	adc	r31, r1
     df0:	80 81       	ld	r24, Z
     df2:	80 33       	cpi	r24, 0x30	; 48
     df4:	21 f4       	brne	.+8      	; 0xdfe <vfprintf+0x2ee>
     df6:	9a 2d       	mov	r25, r10
     df8:	99 7e       	andi	r25, 0xE9	; 233
     dfa:	a9 2e       	mov	r10, r25
     dfc:	09 c0       	rjmp	.+18     	; 0xe10 <vfprintf+0x300>
     dfe:	a2 fe       	sbrs	r10, 2
     e00:	06 c0       	rjmp	.+12     	; 0xe0e <vfprintf+0x2fe>
     e02:	b3 94       	inc	r11
     e04:	b3 94       	inc	r11
     e06:	04 c0       	rjmp	.+8      	; 0xe10 <vfprintf+0x300>
     e08:	8a 2d       	mov	r24, r10
     e0a:	86 78       	andi	r24, 0x86	; 134
     e0c:	09 f0       	breq	.+2      	; 0xe10 <vfprintf+0x300>
     e0e:	b3 94       	inc	r11
     e10:	a3 fc       	sbrc	r10, 3
     e12:	11 c0       	rjmp	.+34     	; 0xe36 <vfprintf+0x326>
     e14:	a0 fe       	sbrs	r10, 0
     e16:	06 c0       	rjmp	.+12     	; 0xe24 <vfprintf+0x314>
     e18:	b2 14       	cp	r11, r2
     e1a:	88 f4       	brcc	.+34     	; 0xe3e <vfprintf+0x32e>
     e1c:	28 0c       	add	r2, r8
     e1e:	92 2c       	mov	r9, r2
     e20:	9b 18       	sub	r9, r11
     e22:	0e c0       	rjmp	.+28     	; 0xe40 <vfprintf+0x330>
     e24:	b2 14       	cp	r11, r2
     e26:	60 f4       	brcc	.+24     	; 0xe40 <vfprintf+0x330>
     e28:	b6 01       	movw	r22, r12
     e2a:	80 e2       	ldi	r24, 0x20	; 32
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	0e 94 7f 07 	call	0xefe	; 0xefe <fputc>
     e32:	b3 94       	inc	r11
     e34:	f7 cf       	rjmp	.-18     	; 0xe24 <vfprintf+0x314>
     e36:	b2 14       	cp	r11, r2
     e38:	18 f4       	brcc	.+6      	; 0xe40 <vfprintf+0x330>
     e3a:	2b 18       	sub	r2, r11
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <vfprintf+0x332>
     e3e:	98 2c       	mov	r9, r8
     e40:	21 2c       	mov	r2, r1
     e42:	a4 fe       	sbrs	r10, 4
     e44:	10 c0       	rjmp	.+32     	; 0xe66 <vfprintf+0x356>
     e46:	b6 01       	movw	r22, r12
     e48:	80 e3       	ldi	r24, 0x30	; 48
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	0e 94 7f 07 	call	0xefe	; 0xefe <fputc>
     e50:	a2 fe       	sbrs	r10, 2
     e52:	17 c0       	rjmp	.+46     	; 0xe82 <vfprintf+0x372>
     e54:	a1 fc       	sbrc	r10, 1
     e56:	03 c0       	rjmp	.+6      	; 0xe5e <vfprintf+0x34e>
     e58:	88 e7       	ldi	r24, 0x78	; 120
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	02 c0       	rjmp	.+4      	; 0xe62 <vfprintf+0x352>
     e5e:	88 e5       	ldi	r24, 0x58	; 88
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	b6 01       	movw	r22, r12
     e64:	0c c0       	rjmp	.+24     	; 0xe7e <vfprintf+0x36e>
     e66:	8a 2d       	mov	r24, r10
     e68:	86 78       	andi	r24, 0x86	; 134
     e6a:	59 f0       	breq	.+22     	; 0xe82 <vfprintf+0x372>
     e6c:	a1 fe       	sbrs	r10, 1
     e6e:	02 c0       	rjmp	.+4      	; 0xe74 <vfprintf+0x364>
     e70:	8b e2       	ldi	r24, 0x2B	; 43
     e72:	01 c0       	rjmp	.+2      	; 0xe76 <vfprintf+0x366>
     e74:	80 e2       	ldi	r24, 0x20	; 32
     e76:	a7 fc       	sbrc	r10, 7
     e78:	8d e2       	ldi	r24, 0x2D	; 45
     e7a:	b6 01       	movw	r22, r12
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	0e 94 7f 07 	call	0xefe	; 0xefe <fputc>
     e82:	89 14       	cp	r8, r9
     e84:	38 f4       	brcc	.+14     	; 0xe94 <vfprintf+0x384>
     e86:	b6 01       	movw	r22, r12
     e88:	80 e3       	ldi	r24, 0x30	; 48
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	0e 94 7f 07 	call	0xefe	; 0xefe <fputc>
     e90:	9a 94       	dec	r9
     e92:	f7 cf       	rjmp	.-18     	; 0xe82 <vfprintf+0x372>
     e94:	8a 94       	dec	r8
     e96:	f3 01       	movw	r30, r6
     e98:	e8 0d       	add	r30, r8
     e9a:	f1 1d       	adc	r31, r1
     e9c:	80 81       	ld	r24, Z
     e9e:	b6 01       	movw	r22, r12
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	0e 94 7f 07 	call	0xefe	; 0xefe <fputc>
     ea6:	81 10       	cpse	r8, r1
     ea8:	f5 cf       	rjmp	.-22     	; 0xe94 <vfprintf+0x384>
     eaa:	22 20       	and	r2, r2
     eac:	09 f4       	brne	.+2      	; 0xeb0 <vfprintf+0x3a0>
     eae:	42 ce       	rjmp	.-892    	; 0xb34 <vfprintf+0x24>
     eb0:	b6 01       	movw	r22, r12
     eb2:	80 e2       	ldi	r24, 0x20	; 32
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	0e 94 7f 07 	call	0xefe	; 0xefe <fputc>
     eba:	2a 94       	dec	r2
     ebc:	f6 cf       	rjmp	.-20     	; 0xeaa <vfprintf+0x39a>
     ebe:	f6 01       	movw	r30, r12
     ec0:	86 81       	ldd	r24, Z+6	; 0x06
     ec2:	97 81       	ldd	r25, Z+7	; 0x07
     ec4:	02 c0       	rjmp	.+4      	; 0xeca <vfprintf+0x3ba>
     ec6:	8f ef       	ldi	r24, 0xFF	; 255
     ec8:	9f ef       	ldi	r25, 0xFF	; 255
     eca:	2b 96       	adiw	r28, 0x0b	; 11
     ecc:	e2 e1       	ldi	r30, 0x12	; 18
     ece:	0c 94 35 08 	jmp	0x106a	; 0x106a <__epilogue_restores__>

00000ed2 <strnlen_P>:
     ed2:	fc 01       	movw	r30, r24
     ed4:	05 90       	lpm	r0, Z+
     ed6:	61 50       	subi	r22, 0x01	; 1
     ed8:	70 40       	sbci	r23, 0x00	; 0
     eda:	01 10       	cpse	r0, r1
     edc:	d8 f7       	brcc	.-10     	; 0xed4 <strnlen_P+0x2>
     ede:	80 95       	com	r24
     ee0:	90 95       	com	r25
     ee2:	8e 0f       	add	r24, r30
     ee4:	9f 1f       	adc	r25, r31
     ee6:	08 95       	ret

00000ee8 <strnlen>:
     ee8:	fc 01       	movw	r30, r24
     eea:	61 50       	subi	r22, 0x01	; 1
     eec:	70 40       	sbci	r23, 0x00	; 0
     eee:	01 90       	ld	r0, Z+
     ef0:	01 10       	cpse	r0, r1
     ef2:	d8 f7       	brcc	.-10     	; 0xeea <strnlen+0x2>
     ef4:	80 95       	com	r24
     ef6:	90 95       	com	r25
     ef8:	8e 0f       	add	r24, r30
     efa:	9f 1f       	adc	r25, r31
     efc:	08 95       	ret

00000efe <fputc>:
     efe:	0f 93       	push	r16
     f00:	1f 93       	push	r17
     f02:	cf 93       	push	r28
     f04:	df 93       	push	r29
     f06:	fb 01       	movw	r30, r22
     f08:	23 81       	ldd	r18, Z+3	; 0x03
     f0a:	21 fd       	sbrc	r18, 1
     f0c:	03 c0       	rjmp	.+6      	; 0xf14 <fputc+0x16>
     f0e:	8f ef       	ldi	r24, 0xFF	; 255
     f10:	9f ef       	ldi	r25, 0xFF	; 255
     f12:	2c c0       	rjmp	.+88     	; 0xf6c <fputc+0x6e>
     f14:	22 ff       	sbrs	r18, 2
     f16:	16 c0       	rjmp	.+44     	; 0xf44 <fputc+0x46>
     f18:	46 81       	ldd	r20, Z+6	; 0x06
     f1a:	57 81       	ldd	r21, Z+7	; 0x07
     f1c:	24 81       	ldd	r18, Z+4	; 0x04
     f1e:	35 81       	ldd	r19, Z+5	; 0x05
     f20:	42 17       	cp	r20, r18
     f22:	53 07       	cpc	r21, r19
     f24:	44 f4       	brge	.+16     	; 0xf36 <fputc+0x38>
     f26:	a0 81       	ld	r26, Z
     f28:	b1 81       	ldd	r27, Z+1	; 0x01
     f2a:	9d 01       	movw	r18, r26
     f2c:	2f 5f       	subi	r18, 0xFF	; 255
     f2e:	3f 4f       	sbci	r19, 0xFF	; 255
     f30:	31 83       	std	Z+1, r19	; 0x01
     f32:	20 83       	st	Z, r18
     f34:	8c 93       	st	X, r24
     f36:	26 81       	ldd	r18, Z+6	; 0x06
     f38:	37 81       	ldd	r19, Z+7	; 0x07
     f3a:	2f 5f       	subi	r18, 0xFF	; 255
     f3c:	3f 4f       	sbci	r19, 0xFF	; 255
     f3e:	37 83       	std	Z+7, r19	; 0x07
     f40:	26 83       	std	Z+6, r18	; 0x06
     f42:	14 c0       	rjmp	.+40     	; 0xf6c <fputc+0x6e>
     f44:	8b 01       	movw	r16, r22
     f46:	ec 01       	movw	r28, r24
     f48:	fb 01       	movw	r30, r22
     f4a:	00 84       	ldd	r0, Z+8	; 0x08
     f4c:	f1 85       	ldd	r31, Z+9	; 0x09
     f4e:	e0 2d       	mov	r30, r0
     f50:	09 95       	icall
     f52:	89 2b       	or	r24, r25
     f54:	e1 f6       	brne	.-72     	; 0xf0e <fputc+0x10>
     f56:	d8 01       	movw	r26, r16
     f58:	16 96       	adiw	r26, 0x06	; 6
     f5a:	8d 91       	ld	r24, X+
     f5c:	9c 91       	ld	r25, X
     f5e:	17 97       	sbiw	r26, 0x07	; 7
     f60:	01 96       	adiw	r24, 0x01	; 1
     f62:	17 96       	adiw	r26, 0x07	; 7
     f64:	9c 93       	st	X, r25
     f66:	8e 93       	st	-X, r24
     f68:	16 97       	sbiw	r26, 0x06	; 6
     f6a:	ce 01       	movw	r24, r28
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28
     f70:	1f 91       	pop	r17
     f72:	0f 91       	pop	r16
     f74:	08 95       	ret

00000f76 <__ultoa_invert>:
     f76:	fa 01       	movw	r30, r20
     f78:	aa 27       	eor	r26, r26
     f7a:	28 30       	cpi	r18, 0x08	; 8
     f7c:	51 f1       	breq	.+84     	; 0xfd2 <__ultoa_invert+0x5c>
     f7e:	20 31       	cpi	r18, 0x10	; 16
     f80:	81 f1       	breq	.+96     	; 0xfe2 <__ultoa_invert+0x6c>
     f82:	e8 94       	clt
     f84:	6f 93       	push	r22
     f86:	6e 7f       	andi	r22, 0xFE	; 254
     f88:	6e 5f       	subi	r22, 0xFE	; 254
     f8a:	7f 4f       	sbci	r23, 0xFF	; 255
     f8c:	8f 4f       	sbci	r24, 0xFF	; 255
     f8e:	9f 4f       	sbci	r25, 0xFF	; 255
     f90:	af 4f       	sbci	r26, 0xFF	; 255
     f92:	b1 e0       	ldi	r27, 0x01	; 1
     f94:	3e d0       	rcall	.+124    	; 0x1012 <__ultoa_invert+0x9c>
     f96:	b4 e0       	ldi	r27, 0x04	; 4
     f98:	3c d0       	rcall	.+120    	; 0x1012 <__ultoa_invert+0x9c>
     f9a:	67 0f       	add	r22, r23
     f9c:	78 1f       	adc	r23, r24
     f9e:	89 1f       	adc	r24, r25
     fa0:	9a 1f       	adc	r25, r26
     fa2:	a1 1d       	adc	r26, r1
     fa4:	68 0f       	add	r22, r24
     fa6:	79 1f       	adc	r23, r25
     fa8:	8a 1f       	adc	r24, r26
     faa:	91 1d       	adc	r25, r1
     fac:	a1 1d       	adc	r26, r1
     fae:	6a 0f       	add	r22, r26
     fb0:	71 1d       	adc	r23, r1
     fb2:	81 1d       	adc	r24, r1
     fb4:	91 1d       	adc	r25, r1
     fb6:	a1 1d       	adc	r26, r1
     fb8:	20 d0       	rcall	.+64     	; 0xffa <__ultoa_invert+0x84>
     fba:	09 f4       	brne	.+2      	; 0xfbe <__ultoa_invert+0x48>
     fbc:	68 94       	set
     fbe:	3f 91       	pop	r19
     fc0:	2a e0       	ldi	r18, 0x0A	; 10
     fc2:	26 9f       	mul	r18, r22
     fc4:	11 24       	eor	r1, r1
     fc6:	30 19       	sub	r19, r0
     fc8:	30 5d       	subi	r19, 0xD0	; 208
     fca:	31 93       	st	Z+, r19
     fcc:	de f6       	brtc	.-74     	; 0xf84 <__ultoa_invert+0xe>
     fce:	cf 01       	movw	r24, r30
     fd0:	08 95       	ret
     fd2:	46 2f       	mov	r20, r22
     fd4:	47 70       	andi	r20, 0x07	; 7
     fd6:	40 5d       	subi	r20, 0xD0	; 208
     fd8:	41 93       	st	Z+, r20
     fda:	b3 e0       	ldi	r27, 0x03	; 3
     fdc:	0f d0       	rcall	.+30     	; 0xffc <__ultoa_invert+0x86>
     fde:	c9 f7       	brne	.-14     	; 0xfd2 <__ultoa_invert+0x5c>
     fe0:	f6 cf       	rjmp	.-20     	; 0xfce <__ultoa_invert+0x58>
     fe2:	46 2f       	mov	r20, r22
     fe4:	4f 70       	andi	r20, 0x0F	; 15
     fe6:	40 5d       	subi	r20, 0xD0	; 208
     fe8:	4a 33       	cpi	r20, 0x3A	; 58
     fea:	18 f0       	brcs	.+6      	; 0xff2 <__ultoa_invert+0x7c>
     fec:	49 5d       	subi	r20, 0xD9	; 217
     fee:	31 fd       	sbrc	r19, 1
     ff0:	40 52       	subi	r20, 0x20	; 32
     ff2:	41 93       	st	Z+, r20
     ff4:	02 d0       	rcall	.+4      	; 0xffa <__ultoa_invert+0x84>
     ff6:	a9 f7       	brne	.-22     	; 0xfe2 <__ultoa_invert+0x6c>
     ff8:	ea cf       	rjmp	.-44     	; 0xfce <__ultoa_invert+0x58>
     ffa:	b4 e0       	ldi	r27, 0x04	; 4
     ffc:	a6 95       	lsr	r26
     ffe:	97 95       	ror	r25
    1000:	87 95       	ror	r24
    1002:	77 95       	ror	r23
    1004:	67 95       	ror	r22
    1006:	ba 95       	dec	r27
    1008:	c9 f7       	brne	.-14     	; 0xffc <__ultoa_invert+0x86>
    100a:	00 97       	sbiw	r24, 0x00	; 0
    100c:	61 05       	cpc	r22, r1
    100e:	71 05       	cpc	r23, r1
    1010:	08 95       	ret
    1012:	9b 01       	movw	r18, r22
    1014:	ac 01       	movw	r20, r24
    1016:	0a 2e       	mov	r0, r26
    1018:	06 94       	lsr	r0
    101a:	57 95       	ror	r21
    101c:	47 95       	ror	r20
    101e:	37 95       	ror	r19
    1020:	27 95       	ror	r18
    1022:	ba 95       	dec	r27
    1024:	c9 f7       	brne	.-14     	; 0x1018 <__ultoa_invert+0xa2>
    1026:	62 0f       	add	r22, r18
    1028:	73 1f       	adc	r23, r19
    102a:	84 1f       	adc	r24, r20
    102c:	95 1f       	adc	r25, r21
    102e:	a0 1d       	adc	r26, r0
    1030:	08 95       	ret

00001032 <__prologue_saves__>:
    1032:	2f 92       	push	r2
    1034:	3f 92       	push	r3
    1036:	4f 92       	push	r4
    1038:	5f 92       	push	r5
    103a:	6f 92       	push	r6
    103c:	7f 92       	push	r7
    103e:	8f 92       	push	r8
    1040:	9f 92       	push	r9
    1042:	af 92       	push	r10
    1044:	bf 92       	push	r11
    1046:	cf 92       	push	r12
    1048:	df 92       	push	r13
    104a:	ef 92       	push	r14
    104c:	ff 92       	push	r15
    104e:	0f 93       	push	r16
    1050:	1f 93       	push	r17
    1052:	cf 93       	push	r28
    1054:	df 93       	push	r29
    1056:	cd b7       	in	r28, 0x3d	; 61
    1058:	de b7       	in	r29, 0x3e	; 62
    105a:	ca 1b       	sub	r28, r26
    105c:	db 0b       	sbc	r29, r27
    105e:	0f b6       	in	r0, 0x3f	; 63
    1060:	f8 94       	cli
    1062:	de bf       	out	0x3e, r29	; 62
    1064:	0f be       	out	0x3f, r0	; 63
    1066:	cd bf       	out	0x3d, r28	; 61
    1068:	09 94       	ijmp

0000106a <__epilogue_restores__>:
    106a:	2a 88       	ldd	r2, Y+18	; 0x12
    106c:	39 88       	ldd	r3, Y+17	; 0x11
    106e:	48 88       	ldd	r4, Y+16	; 0x10
    1070:	5f 84       	ldd	r5, Y+15	; 0x0f
    1072:	6e 84       	ldd	r6, Y+14	; 0x0e
    1074:	7d 84       	ldd	r7, Y+13	; 0x0d
    1076:	8c 84       	ldd	r8, Y+12	; 0x0c
    1078:	9b 84       	ldd	r9, Y+11	; 0x0b
    107a:	aa 84       	ldd	r10, Y+10	; 0x0a
    107c:	b9 84       	ldd	r11, Y+9	; 0x09
    107e:	c8 84       	ldd	r12, Y+8	; 0x08
    1080:	df 80       	ldd	r13, Y+7	; 0x07
    1082:	ee 80       	ldd	r14, Y+6	; 0x06
    1084:	fd 80       	ldd	r15, Y+5	; 0x05
    1086:	0c 81       	ldd	r16, Y+4	; 0x04
    1088:	1b 81       	ldd	r17, Y+3	; 0x03
    108a:	aa 81       	ldd	r26, Y+2	; 0x02
    108c:	b9 81       	ldd	r27, Y+1	; 0x01
    108e:	ce 0f       	add	r28, r30
    1090:	d1 1d       	adc	r29, r1
    1092:	0f b6       	in	r0, 0x3f	; 63
    1094:	f8 94       	cli
    1096:	de bf       	out	0x3e, r29	; 62
    1098:	0f be       	out	0x3f, r0	; 63
    109a:	cd bf       	out	0x3d, r28	; 61
    109c:	ed 01       	movw	r28, r26
    109e:	08 95       	ret

000010a0 <_exit>:
    10a0:	f8 94       	cli

000010a2 <__stop_program>:
    10a2:	ff cf       	rjmp	.-2      	; 0x10a2 <__stop_program>
